// ============================================================
// === This file was created with MakeCARR.bas by RhoSigma, ===
// === use it in conjunction with its respective .bm file.  ===
// ============================================================

// --- Array(s) representing the contents of file Exit32px.png
// ---------------------------------------------------------------------
static const unsigned int32 ExitImgL0[] = {
    416,
    0x474E5089,0x0A1A0A0D,0x0D000000,0x52444849,0x20000000,0x20000000,0x00000608,0x7A7A7300,
    0x060000F4,0x4144494F,0xA5DA7854,0x534C7B97,0xBFC71C57,0x54B140B7,0x539E4141,0x82C281F0,
    0xD4E87406,0x8D32E885,0xA2CBA33A,0xD9318CDB,0xCDC51996,0x8D3A23A9,0x3371998B,0x659FEDCE,
    0xCC88F64B,0x403818F9,0xCD21C19D,0x88399254,0x0F0C500F,0x2C040319,0x428142D0,0xBDB94A11,
    0x7B9CECF7,0x2C0B6F6F,0x281DD6E6,0xFCA4F6E7,0xF7DF9FBE,0xDEEFCEFC,0x3A30D072,0x5A225FB2,
    0x88CFE73E,0xB1C656DB,0x61F2D399,0x48CB8FF3,0x9F76DDF1,0x5FEDA215,0xCAA3E539,0x43278310,
    0xD693EAE7,0x6AB767B7,0x7EFE6807,0xA2A3F929,0x7A7E3B1D,0x119657EC,0x9B9849F1,0x19C911B1,
    0x9B8C609B,0x2E75878F,0x80DC637C,0xD84DFBB2,0x800FCA71,0x245F6FC6,0xC82D2BD7,0x8074F53C,
    0xCC78E8D0,0xA906B45A,0x6445DFAB,0x05E822E2,0x00822111,0xC5A22C32,0x0AD5C6E2,0x9BE94C17,
    0x91AAAB71,0x500ED2C5,0xF262F5F7,0x1C759567,0x063C3180,0x91CB69F1,0x223B76B6,0x34226762,
    0x40A61A7C,0x422F0044,0x0B708B70,0x3D045E50,0xCB170403,0xED257186,0x36D4544D,0x3F67F323,
    0xEAFEA81C,0x6B5A5205,0x32D3CEC3,0x5F99CBC0,0x7AC96922,0x44498D4C,0x20C22738,0xAF05108A,
    0xF01220A0,0xE9EF666C,0x0C0DDBB5,0xDDE4108D,0x79A5C61C,0x77F9509B,0xED3FDE0B,0x8FF70387,
    0xEAB7242F,0x0281F1BB,0x8F02E1B0,0x08F22757,0x2FA01300,0xB2A2A137,0x05054F38,0x0EBCB19A,
    0x62065D65,0x1BC97900,0xCAD8DD51,0xB8076962,0x94953473,0xEBB1DA37,0xBEB00CAC,0xC0CAC780,
    0x05060401,0x510242CB,0xDD4595B2,0xE3DEF2A2,0x79879D00,0x2EDBC282,0x8EBE26E4,0x763366DA,
    0xE003F19D,0x49F3C3AF,0x761F4B65,0x00AB339F,0x100A39CB,0x498AAC18,0x20B28B96,0xC1B796EF,
    0xF7D04EBB,0x6AA4A084,0x36126704,0x8EDCDEA0,0xDACD67DD,0x4C1C6E01,0x0E6D3521,0x0BC5F9EC,
    0xC87054B0,0xCD7B280E,0x606DDE0B,0x88AE488E,0xD60F5A9C,0x0D15115E,0xADC64E3C,0x15AB23C3,
    0x01F9CE7B,0x4C959C50,0x609F3BEA,0x0A9B4E6F,0x4FD23E90,0x66A0981D,0xBBEF5B28,0x6385441D,
    0x18F44D60,0x7C045836,0xAD16B917,0x28F89D5D,0xC03B4DA7,0xC8735DE5,0xB2271EA3,0x52017BCE,
    0x4011FB07,0x9155E01D,0xD6AF95D1,0xD4832084,0xF5B0F2B4,0x793D7C13,0xBB7A3A0D,0x01AB9590,
    0x945476E0,0x97574961,0x6CC760B3,0x6170EAD2,0x72400F9F,0x7A811D9F,0x05FB38C3,0x56CF7325,
    0x61C1F5B0,0x6ECD0782,0x4F10B4F0,0xE6C15718,0x5FBEC1E8,0x4EB001B5,0x2EB8DB1E,0x721962C4,
    0x179E7F63,0x17A7B120,0xE910A0BA,0xC2BEF1C8,0xD611C7A2,0xC0093817,0xA5A02DDC,0x8EC49053,
    0x7D815FE9,0x6962CEC8,0xB5598803,0x6E47370A,0x2AEF4AC2,0x0178171F,0xE0BD6C12,0xF2B50674,
    0x47ABCCD9,0x40CF7E50,0xFC47B45C,0x7FA02ED3,0xE9A38088,0x6056E11C,0x40E07780,0x92800FBE,
    0xC58E7FE9,0x3A68B9B9,0x1C57127D,0x6C2AC8A5,0xDB620157,0x87D3A07B,0x2E484D48,0x26164E38,
    0xE880DBC4,0xA097B5BA,0x67B346D5,0x21C384EA,0xE25C0677,0x185E0E20,0xA4B8B003,0xCBC0A684,
    0xA76EC49D,0x201D010F,0x7F40DDDD,0x20E0C83F,0xB0CBCAEA,0x3D1CACA2,0x10065AD4,0x040298F1,
    0xA2311419,0x8F48A116,0x0C24E79E,0xED6FBDD0,0xC5C86372,0xF85BE484,0xB832E77E,0xBA1C4E75,
    0xC0063ED8,0x4E9C0264,0xA401A1A0,0x387019B9,0xD2213946,0x0505D988,0x48B169D8,0xBA9A9300,
    0x114672B1,0x286DF26D,0x2DEBDAEE,0xB97AC940,0x7334CC1E,0x0F621376,0x6CF29C05,0x14B1C7B0,
    0x3E1760BA,0x201634B9,0xA6A41F3F,0xA6D81E86,0xA840DB71,0xA97775AD,0xA9EFB703,0xDBD7040E,
    0x0D9A1190,0xFC1DDD7B,0xF48838E0,0xDF6A79A4,0xDBB7D967,0x04FAD845,0x7EC70039,0xB38D0FE9,
    0xF40967B3,0xFF0E1746,0x06ADA1D6,0xC16CB7D2,0x28A53BC3,0x81C0EF0E,0x06B50EA2,0xE8367574,
    0x55B80D02,0x7305835B,0x9C43A853,0x4C2C127A,0x194A21DC,0x1913C6CB,0xACDB4E82,0xE612108B,
    0x3B97A7C6,0x29829DB4,0x1F38F1F1,0x874408D0,0x17A148E0,0x01B6AC40,0x09B50681,0xE987EB31,
    0x6EE1335E,0x4E732787,0x901D9512,0x85E63BC7,0x6441B9F4,0x81F7B4B1,0xCB2184FC,0x384998C4,
    0x02A2C57A,0xC0BB2AB8,0x9A5422B1,0x6CDE9D8E,0xDA0407BA,0x83CF0074,0x77BB64A0,0xADA02523,
    0x2530D28F,0xA168E09A,0xFC277B45,0x4C918170,0x9F142E7E,0x1805EEFD,0x4102B728,0x4A2C2A46,
    0xFA418EE2,0x91B3E250,0x64C73892,0x41E22489,0x3E61AB79,0x2C756322,0x417BF696,0x99033CE6,
    0xCF86109A,0x402AAC8B,0x863355F5,0xE27849C5,0x2790A914,0x59C9F10C,0x23F9F616,0x9758DDFD,
    0x81699882,0x07E45638,0x7AC97BC0,0x1C2B3312,0x017AAEC7,0x80B6E46E,0x954987D3,0xF3875A3D,
    0x50ED7B8A,0xAAB5E16B,0x119F4C14,0x01F96344,0x106276F0,0x81139B89,0x805EC5E3,0xB42D39EB,
    0x4D428511,0x81D073DE,0x0BE78571,0xF3C1EEB5,0x67A59848,0x6C03B4B1,0xA640199D,0xB8E24527,
    0xC7003469,0xE144C600,0xA30E1814,0xB8A7364F,0x325EFAB0,0xA04E2766,0x6070FCB1,0x491D74F3,
    0x09C28948,0xCC6B801F,0xD4A87D01,0x4E6459DF,0xA9C41AFD,0x05F3DEE7,0x08B0F38A,0x3F735883,
    0x8C93B315,0x87E4C2F8,0x05076303,0x7BF23720,0x1705E3E9,0xAA54C9E6,0x3B54A278,0xE9D35447,
    0x5E9FA84D,0xDA2BD096,0xC81A61EB,0xE5F51A8B,0xAE0199E2,0x197A0053,0xBBEA26A6,0x34A5040D,
    0xE1BBBD32,0x747E60DA,0xFD62D3E9,0xC825006F,0xA2610A63,0x48EE89B3,0xBA3F3389,0x67AC6B5F,
    0xF0C36002,0x9D0E6746,0x9157D2EE,0xF1BA20B3,0x0BFCE359,0x4EFA973E,0xF2B5FE07,0x00000000
};

static const unsigned int8 ExitImgB[] = {
    8,
    0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,0x82
};

// --- Saved full qualified output path and filename, so we've no troubles
// --- when cleaning up, even if the current working folder was changed
// --- during program runtime.
// ---------------------------------------------------------------------
char ExitImgName[8192]; // it's a safe size for any current OS

// --- Cleanup function to delete the written file, called by the atexit()
// --- handler at program termination time, if requested by user.
// ---------------------------------------------------------------------
void KillExitImgData(void)
{
    remove(ExitImgName);
}

// --- Function to write the array(s) back into a file, will return the
// --- full qualified output path and filename on success, otherwise an
// --- empty string is returned (access/write errors, file truncated).
// ---------------------------------------------------------------------
const char *WriteExitImgData(const char *FileName, int16 AutoClean)
{
    FILE *han = NULL; // file handle
    int32 num = NULL; // written elements

    #ifdef QB64_WINDOWS
    if (!_fullpath(ExitImgName, FileName, 8192)) return "";
    #else
    if (!realpath(FileName, ExitImgName)) return "";
    #endif

    if (!(han = fopen(ExitImgName, "wb"))) return "";
    if (AutoClean) atexit(KillExitImgData);

    num = fwrite(&ExitImgL0[1], 4, ExitImgL0[0], han);
    if (num != ExitImgL0[0]) {fclose(han); return "";}

    num = fwrite(&ExitImgB[1], 1, ExitImgB[0], han);
    if (num != ExitImgB[0]) {fclose(han); return "";}

    fclose(han);
    return ExitImgName;
}


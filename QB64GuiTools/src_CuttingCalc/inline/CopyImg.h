// ============================================================
// === This file was created with MakeCARR.bas by RhoSigma, ===
// === use it in conjunction with its respective .bm file.  ===
// ============================================================

// --- Array(s) representing the contents of file Copy32px.png
// ---------------------------------------------------------------------
static const unsigned int32 CopyImgL0[] = {
    320,
    0x474E5089,0x0A1A0A0D,0x0D000000,0x52444849,0x20000000,0x20000000,0x00000608,0x7A7A7300,
    0x040000F4,0x414449CA,0xADDA7854,0x544C6997,0xFFC71457,0x36520C53,0x6356C45B,0xD2450FD2,
    0x34D34BF4,0xD8D6834D,0xA02A56C5,0x02881A88,0x7D914085,0x652FB22F,0x860404D8,0x56410465,
    0xD94B2C59,0x4AADA1A5,0x42AA4D41,0x2502376B,0x02A06356,0x336FB0C3,0xE5877B73,0xC21BCBC1,
    0xB93FC30C,0x73BCCB79,0x3DDE6FCE,0x797BBCE7,0xD9525158,0x566D827D,0x3189BD88,0x31D10C3D,
    0xBC33D1B5,0xD28493D5,0xDED4247B,0x2782DB64,0xA847DE95,0x7A2F41C3,0xFD1D3DFA,0x17C4029B,
    0x87309177,0x3BD07843,0xF7F076AC,0x8483DADF,0x7708BB92,0x5E8330FC,0xB3D1D096,0x515C4029,
    0x7806A127,0xC03EA7D4,0xA87BC67B,0x3A442EBF,0xE01E561D,0x48776B9B,0xF411D394,0x36AA33FC,
    0xBB46BBC0,0x40EC2FC1,0xCA47F394,0xBD5F4403,0x3E5C6245,0x1101E3C6,0xBBD681EB,0x48C16A7D,
    0xDD538B25,0x35B66D5D,0xF41DF105,0x990E8272,0xDC888042,0xF5DF091F,0xEFF9FC53,0x6341CB18,
    0x9B3CAF47,0x32300CB7,0xD6D28B3E,0x8AC6B99E,0xCD3BDF5C,0x96F475A5,0x03043D68,0x276C2E10,
    0xA19FEE71,0xE59899F7,0x5FD6F6A0,0x20F2FB08,0x841F7EBA,0x44852244,0x2A54852A,0xECB65483,
    0x6D932643,0x90FCDC18,0x788432F1,0xDD2D2506,0x42E50DF3,0x566F9FFF,0x6087AF54,0xDAB24200,
    0x2997A248,0xB38F9FFA,0x3FB5549C,0x61E38446,0x3AA0A2FC,0x46D02916,0xA29F1B1A,0xDED60700,
    0x6E288504,0x50DF347A,0xBCEFF429,0x3040C959,0x16824100,0x8663EC92,0x10934327,0xA6B0CE4F,
    0x08F9CA20,0x1D50AA1E,0xC0393072,0xAC039371,0x2214C3FB,0x2E73B2B3,0x82D4C3CE,0x43A43E5E,
    0xA7F800CC,0x7F349135,0x661B3C0B,0xF56BAD37,0xCE4F200F,0x9511FE9E,0x53C54600,0x88C4C2F8,
    0xFE745BF3,0xF85EC46D,0xBB3E5424,0x0031F474,0x24F529BE,0x0C4B6BE3,0x0CB0CE8E,0xC0F73584,
    0xDF8A3D77,0xCF2F9406,0x460945C5,0xF7DDB8C7,0xCC8A0518,0x6E7109FB,0x5CB1D347,0x0032BF9E,
    0x2475499E,0x2F0AD83B,0x7E94B3C4,0x6B2A319A,0xC78246ED,0x89E3F8E7,0x4BD89948,0x8A00A05A,
    0x6F07CADE,0xB09843EF,0xC79E891D,0x00C0FE98,0x135427B8,0x8859E861,0x8659E726,0x91B725C9,
    0xEFF39344,0xE2CDE2A7,0x8EF50A6E,0xB2422191,0xFBC970DB,0x02E01738,0x45E48ABF,0x7A7C60D8,
    0x2FC86581,0xBEA901F8,0xD5A3E866,0xBB393E31,0x7A5D8065,0xFF78C32F,0xADEC9A2E,0xE733F548,
    0x5CC73802,0xB6D10527,0xC45D9A98,0xCBF9BAF0,0x7A44EAAC,0x0C0C09C0,0x06F5A84E,0x9F737AE4,
    0x9AD2023E,0x92781E90,0x5918E00B,0xED628A46,0x9EC0BB30,0x334160BF,0xE14E8332,0x15298BE9,
    0xC6F571C3,0x64F2BA6B,0x2B45E647,0x787D802E,0x738D2911,0x6EC573A4,0xEB97012E,0x06721D91,
    0x21A647CF,0x3151989A,0xF40C9AE4,0x50DFB1B5,0x2D7B2687,0x0171AE68,0x901707CE,0xDA6724F2,
    0x4686096A,0xB8C31927,0x86E436FC,0xB448635B,0xDAABE0F5,0xF70DA06B,0x1B916FF8,0xB005C361,
    0xAA4ABA09,0x23205D92,0x2B9995EC,0x51F90ABF,0x6547E8E7,0xC3006D4E,0x89705A5D,0xF44144AD,
    0x75802E79,0x91B92E60,0x7231CAEA,0x6147298A,0x68C62D8C,0xEBAC8E79,0x7F072A0F,0xEAAF0745,
    0x347384ED,0xC76B17F5,0x97E33805,0x3DD26A43,0x4707CE96,0x5420A6D6,0xBE628750,0x16662603,
    0x91C98D54,0x1C26B6BE,0x73404B22,0xE5600B8D,0x04EA4593,0xBB231C5E,0x4F5C42D0,0x9CF4C274,
    0x8A508544,0x63B5A3A5,0x35CD1FC9,0x2F49C02E,0xF2C86901,0xE4D118E1,0xAFA5C544,0xC520B730,
    0x97ADA27F,0xBA06EBE2,0xC0D4D2D0,0xA8058BB9,0x02E1714A,0x20CCF09C,0x1CBED98D,0x3CA09B43,
    0xC57148DC,0x42A64482,0xDCD2C538,0xA9AC12F1,0x3754EABF,0x7BB9802E,0xF5D1E11A,0x0ABC8109,
    0xD2D0DB98,0x349A89DA,0x520ABA77,0xA1A2DF7F,0x80D9C3C1,0xF74DA82B,0xC95002E0,0x2BA60F57,
    0xBE564647,0x19757ED9,0xDD84209E,0xDED5541F,0xF1E07ADD,0x97ED3878,0x5E04EF83,0xE574010A,
    0x191CADCF,0x76677A59,0xAB7A67D7,0x7557EFFD,0x340B27CA,0x280214D7,0xB1B946D4,0x097A5955,
    0xA7E398D0,0x47B9803C,0xF1CE693A,0x0B0036DB,0x572DFD3A,0x300795FC,0xEDBCBB73,0xDCD6E6BB,
    0xB001E540,0x29AA7241,0x69796EF9,0x773FFCD7,0xA13F33E4,0x00307C96,0x49000000,0xAE444E45
};

static const unsigned int8 CopyImgB[] = {
    3,
    0x42,0x60,0x82
};

// --- Saved full qualified output path and filename, so we've no troubles
// --- when cleaning up, even if the current working folder was changed
// --- during program runtime.
// ---------------------------------------------------------------------
char CopyImgName[8192]; // it's a safe size for any current OS

// --- Cleanup function to delete the written file, called by the atexit()
// --- handler at program termination time, if requested by user.
// ---------------------------------------------------------------------
void KillCopyImgData(void)
{
    remove(CopyImgName);
}

// --- Function to write the array(s) back into a file, will return the
// --- full qualified output path and filename on success, otherwise an
// --- empty string is returned (access/write errors, file truncated).
// ---------------------------------------------------------------------
const char *WriteCopyImgData(const char *FileName, int16 AutoClean)
{
    FILE *han = NULL; // file handle
    int32 num = NULL; // written elements

    #ifdef QB64_WINDOWS
    if (!_fullpath(CopyImgName, FileName, 8192)) return "";
    #else
    if (!realpath(FileName, CopyImgName)) return "";
    #endif

    if (!(han = fopen(CopyImgName, "wb"))) return "";
    if (AutoClean) atexit(KillCopyImgData);

    num = fwrite(&CopyImgL0[1], 4, CopyImgL0[0], han);
    if (num != CopyImgL0[0]) {fclose(han); return "";}

    num = fwrite(&CopyImgB[1], 1, CopyImgB[0], han);
    if (num != CopyImgB[0]) {fclose(han); return "";}

    fclose(han);
    return CopyImgName;
}


'============================================================
'=== This file was created with MakeDATA.bas by RhoSigma, ===
'=== you must $INCLUDE this at the end of your program.   ===
'============================================================

'--------------------------
'--- ReadInfo16ImgData$ ---
'--------------------------
' This function will read the DATAs you've created with MakeDATA.bas
' into a string, no data will be written to disk. If you rather wanna
' rebuild the original file on disk, then use the write function below.
'
' You may directly pass the returned string to _SNDOPEN, _LOADIMAGE or
' _LOADFONT when using the memory load capabilities of these commands.
'----------
' SYNTAX:
'   dataStr$ = ReadInfo16ImgData$
'----------
' RESULT:
'   --- dataStr$ ---
'    The data of the embedded file. This is in fact the same as if you
'    had opend the file and read its entire content into a single string.
'---------------------------------------------------------------------
FUNCTION ReadInfo16ImgData$
'--- option _explicit requirements ---
DIM numL&, numB&, rawdata$, stroffs&, i&, dat&
'--- read DATAs ---
RESTORE Info16Img
READ numL&, numB&
rawdata$ = SPACE$((numL& * 4) + numB&)
stroffs& = 1
FOR i& = 1 TO numL&
    READ dat&
    MID$(rawdata$, stroffs&, 4) = MKL$(dat&)
    stroffs& = stroffs& + 4
NEXT i&
IF numB& > 0 THEN
    FOR i& = 1 TO numB&
        READ dat&
        MID$(rawdata$, stroffs&, 1) = CHR$(dat&)
        stroffs& = stroffs& + 1
    NEXT i&
END IF
'--- set result ---
ReadInfo16ImgData$ = rawdata$
END FUNCTION

'---------------------------
'--- WriteInfo16ImgData$ ---
'---------------------------
' This function will write the DATAs you've created with MakeDATA.bas
' back to disk and so it rebuilds the original file.
'
' After the writeback call, only use the returned realFile$ to access the
' written file. It's your given path, but with an maybe altered filename
' (number added) in order to avoid the overwriting of an already existing
' file with the same name in the given location.
'----------
' SYNTAX:
'   realFile$ = WriteInfo16ImgData$ (wantFile$)
'----------
' INPUTS:
'   --- wantFile$ ---
'    The filename you would like to write the DATAs to, can contain
'    a full or relative path.
'----------
' RESULT:
'   --- realFile$ ---
'    - On success this is the path and filename finally used after all
'      applied checks, use only this returned filename to access the
'      written file.
'    - On failure this function will panic with the appropriate runtime
'      error code which you may trap and handle as needed with your own
'      ON ERROR GOTO... handler.
'---------------------------------------------------------------------
FUNCTION WriteInfo16ImgData$ (file$)
'--- option _explicit requirements ---
DIM po%, body$, ext$, num%, numL&, numB&, rawdata$, stroffs&, i&, dat&, ff%
'--- separate filename body & extension ---
FOR po% = LEN(file$) TO 1 STEP -1
    IF MID$(file$, po%, 1) = "." THEN
        body$ = LEFT$(file$, po% - 1)
        ext$ = MID$(file$, po%)
        EXIT FOR
    ELSEIF MID$(file$, po%, 1) = "\" OR MID$(file$, po%, 1) = "/" OR po% = 1 THEN
        body$ = file$
        ext$ = ""
        EXIT FOR
    END IF
NEXT po%
'--- avoid overwriting of existing files ---
num% = 1
WHILE _FILEEXISTS(file$)
    file$ = body$ + "(" + LTRIM$(STR$(num%)) + ")" + ext$
    num% = num% + 1
WEND
'--- write DATAs ---
RESTORE Info16Img
READ numL&, numB&
rawdata$ = SPACE$((numL& * 4) + numB&)
stroffs& = 1
FOR i& = 1 TO numL&
    READ dat&
    MID$(rawdata$, stroffs&, 4) = MKL$(dat&)
    stroffs& = stroffs& + 4
NEXT i&
IF numB& > 0 THEN
    FOR i& = 1 TO numB&
        READ dat&
        MID$(rawdata$, stroffs&, 1) = CHR$(dat&)
        stroffs& = stroffs& + 1
    NEXT i&
END IF
ff% = FREEFILE
OPEN file$ FOR OUTPUT AS ff%
PRINT #ff%, rawdata$;
CLOSE ff%
'--- set result ---
WriteInfo16ImgData$ = file$
EXIT FUNCTION

'--- DATAs representing the contents of file Info16px.png
'---------------------------------------------------------------------
Info16Img:
DATA 216,18
DATA &H474E5089,&H0A1A0A0D,&H0D000000,&H52444849,&H10000000,&H10000000,&H00000608,&HFFF31F00
DATA &H00000061,&H59487009,&H0B000073,&H0B000013,&H9A000113,&H0000189C,&H44492403,&HCB385441
DATA &H684D935D,&H8614559C,&HF7EF7B9F,&HBEFE64CD,&H24CCD324,&H69B49356,&HD0A25170,&H22AD6C76
DATA &H8DC14DDA,&H2E976C2E,&H441488B4,&HBA2BB95D,&H0A16A370,&H20A84AE2,&H5171B882,&H41454910
DATA &H18A8914A,&H44D8D351,&H9324C6D3,&H924E99A4,&HBFBE64CE,&H175EF73B,&HAEFAC169,&H2FBCE2CE
DATA &H0AF3CE07,&H6FE3A7FE,&HF6FAD72D,&H0A94CF14,&H465C99EA,&H25D6301C,&HD99EA13B,&H9B26766A
DATA &HCE2ED74B,&HCAECF67C,&HBDC5F77F,&H379BD8E1,&H7060F283,&HE948DF61,&H0A03BDE5,&H6057C025
DATA &H610B681D,&H095C58E2,&H98FFE677,&HC7E57B7D,&HFF5C3E4F,&H802EE3E5,&HFEBDA802,&HBC343077
DATA &H44F0F267,&H9F60DCF0,&HBED057C4,&H2DD25113,&H8D1F39F2,&H0C119722,&H7C99FBF4,&HC7727AB9
DATA &HE6C2560C,&HFB64E5D2,&HFD009586,&H0E17BD03,&HEF1E2C1D,&H941EEFCB,&H8756476A,&H857CF1BC
DATA &H612CB553,&H475308E2,&HC570C2D7,&H47B51313,&HFA3EAD5E,&HF2002BE2,&HD57F6BF0,&H2F058C0E
DATA &HC605E6F5,&HB11DA242,&H122C5106,&H58685869,&HC711D4A2,&HA475288E,&H943C31C6,&HD70F4393
DATA &H9C8D29DE,&HE5BD7AA8,&H90C8CCE0,&HEB107027,&H852880DD,&HD9CFAEED,&H91A4DB4F,&H4252BFA6
DATA &H02BBF04A,&H3BEB20A3,&H568F8DF6,&H3A9F8617,&HF28A95ED,&H6303D644,&HA24758C0,&HE6D8D5A1
DATA &HFD82FDC9,&HCA547307,&H46F83E05,&H518129E3,&H9083E30E,&HC7C95292,&HCA8F542F,&H5AC6EF9C
DATA &HD05AC3A1,&H900D485D,&HF669980F,&H1E44F4F0,&H1D4E2163,&HB448EA71,&HEF6818C3,&H299B1A18
DATA &H69EA3D38,&HE75F926D,&HC0687F12,&HAC4A2823,&H7E616305,&HB01405B1,&H43B5A1CE,&HF6C11A00
DATA &HD5B5949D,&H3DFD7D0E,&H6F089D58,&H54CC95AB,&HD78F941E,&H356E696F,&H048CD905,&H016A6909
DATA &H89243448,&HA740EA21,&H1A449293,&H4AC61D6B,&H92C6F692,&H4C6F5DBC,&HA5127216,&H13881604
DATA &H8C59144B,&HDB984BB9,&H1A9C6B7D,&H29E5039C,&HB88F5932,&HC6C365BD,&H6B7253EF,&HC6E2FA79
DATA &H90A766EA,&HA04A7857,&H09E7813C,&H67F5DCA4,&H2EE2107C,&H808042B0,&H7F87BFA0,&H87AEBFA6
DATA &H549753EB,&H2D57C6EB,&H1E227A5B,&H293B1F1E,&H81D61294,&H70BC3A8B,&HBC687144,&H4413C640
DATA &HBBD7CC29,&H06296358,&H7EE6D659,&HBCAE974B,&H6EB74E77,&HAC00A77E,&H776F3FB1,&H460795F2
DATA &H28523A1F,&H9F174464,&H9F0CCDB9,&HCBE5D0FF,&HD7AE529F,&HC50438BB,&H9FFA8652,&HB7C2E9D3
DATA &HAE147EEF,&H180F395E,&HCE6C9005,&HF16B68DA,&HBC7AC6F2,&H63CF4DA1,&HD0B94AE5,&HE7C9F393
DATA &H58929E24,&HEB34E8E7,&H5FF7FAF6,&H7D5F2CAC,&H76B85CFF,&HDC903CF5,&HCA7BC6D7,&HE6AD1E0D
DATA &HB2A76B06,&H0263DEC1,&H28746A33,&H296376D2,&H4A9D9CDE,&H592ED79A,&HCEAFBEDD,&H79F502FF
DATA &H87,&HF6,&H52,&H91,&HF7,&H48,&H00,&H00,&H00,&H00,&H49,&H45,&H4E,&H44,&HAE,&H42
DATA &H60,&H82
END FUNCTION


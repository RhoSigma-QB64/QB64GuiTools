// ============================================================
// === This file was created with MakeCARR.bas by RhoSigma, ===
// === use it in conjunction with its respective .bm file.  ===
// ============================================================

// --- Array(s) representing the contents of file Aluminium.jpg
// ---------------------------------------------------------------------
static const uint32_t AluminiumImgL0[] = {
    432,
    0xE0FFD8FF,0x464A1000,0x01004649,0x01000001,0x00000100,0x4300DBFF,0x02020300,0x03020203,
    0x04030303,0x05040303,0x04050508,0x070A0504,0x0C080607,0x0B0C0C0A,0x0D0B0B0A,0x0D10120E,
    0x0B0E110E,0x1016100B,0x15141311,0x0F0C1515,0x14161817,0x15141218,0x00DBFF14,0x04030143,
    0x05040504,0x09050509,0x0D0B0D14,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,
    0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0xC0FF1414,
    0x00081100,0x03800080,0x02002201,0x11030111,0x00C4FF01,0x03000019,0x00010101,0x00000000,
    0x00000000,0x01000000,0x08040203,0x3C00C4FF,0x02010010,0x08040702,0x07020305,0x00000000,
    0x02000100,0x12119103,0x92525113,0xA15341D1,0x434221E1,0xA2816261,0x312214F0,0x8271E293,
    0x237204B1,0xD2836332,0xC4FFF2F1,0x01011400,0x00000000,0x00000000,0x00000000,0x00000000,
    0x1400C4FF,0x00000111,0x00000000,0x00000000,0x00000000,0xDAFF0000,0x01030C00,0x03110200,
    0x003F0011,0xEC8648F5,0xA1456342,0xA2E1F407,0x99F073A8,0xBB07443B,0x9820070F,0x21C10E80,
    0x76FA63A2,0xFCF269E1,0x0E470455,0xAB9DE2A8,0x8222C186,0x461D0062,0x1053FCE5,0x2F37EAA8,
    0x1F23A8E2,0x3DE2A374,0x5582EAF4,0x3FE41606,0xDC5645F1,0xB654F232,0xAAE36927,0x3FEBC955,
    0x550C9ADF,0x25B9746F,0xE9DB1952,0x12C7E954,0x386AD65C,0xCD2591F6,0x62A12C06,0x87B25239,
    0x5428C7B1,0xF2F576B2,0xED70B308,0x6D56825C,0x531164C4,0x18AC64C6,0xBF8FE3ED,0x5ED730D1,
    0x1C24974F,0x808F5DF5,0xFE634745,0x85F95734,0x97223AF2,0xD191A98E,0x67773A06,0x4621D129,
    0x6492CBEC,0xB84F0C3F,0xFCAA5975,0x4075CE0F,0x80EF66E8,0xEC261FD1,0xAB4A74FA,0x75CE6EF7,
    0xD68F6B40,0xF9AB3F11,0xDB4D05A0,0x8516DDA6,0x6D1E0E4C,0x017CA959,0x372A9A9F,0x36C8DC70,
    0xCC8F0D2A,0x1E835911,0xCD18B060,0x9B9DCCC8,0x40EA650F,0xF37B1BED,0x7E62D422,0x3358696E,
    0x40EE8703,0x3F9CDB82,0x716E057A,0x5B343FBB,0x999D63BB,0xC417406C,0x113BBD1F,0x09CAF989,
    0xD3BDC4DA,0x9D4B7C40,0xC4CB52C5,0x3F3BE5FC,0x509DF313,0xAAE7394C,0xF9131DE9,0x1DF938B0,
    0x7E7FEA16,0x5C55AA73,0x75CE4436,0x60148141,0xDBA94E19,0x35970D1C,0x7EE8868A,0xF45091FC,
    0x2497ACFC,0xED8E111B,0x11D3FCBE,0x35BC81DD,0xB770AA51,0xEEA8242F,0xBF207919,0x90083BC4,
    0xEB121FD5,0x03540DB8,0x495E8E7B,0x82E43B80,0xE38EFAC3,0x6F608B20,0xB8689092,0xBE003AC9,
    0xDE683748,0x61D6A9FC,0x58F272DA,0x909C929C,0xE95F966E,0xFF928FE4,0x639D4A00,0xBB749279,
    0x520D4278,0xAE28FDDB,0x59E4B4D1,0x8AA9F7F9,0xE8CCC6DB,0x7A17D781,0x3068A579,0xAAA84EFA,
    0x4467B271,0x3EC33754,0xB3154467,0x31DDEC70,0x851D55A2,0x51291AD3,0xC97F6EE1,0x9F59381D,
    0x8E4A41F2,0x598946F6,0x1A13ED3C,0xFA71552C,0x00FF9935,0x76BFEA24,0x6AD0FCCC,0x302126C6,
    0x86B8188B,0xF76B9060,0x68CDCF6C,0x37EA2032,0x28520532,0x02C80CEB,0x69B6EB20,0x22C3C486,
    0x2E9E589D,0x74C8201A,0x3A13D741,0x7FE0D1A2,0xADDA4D9C,0xF2BDC506,0x1317D109,0xB41884F2,
    0xAACDC138,0x0EDAE903,0x8AE8566D,0x1124D13A,0xF98C2FFE,0x3B1D1904,0x7C15B938,0xFE94F924,
    0x6AB8B57D,0xD385CD97,0xFC1080E6,0x08316506,0x4B3EDDEE,0xF94C7814,0x196154A5,0x101A24BF,
    0x79940DE2,0x760D5A73,0x4CCD25DA,0x4C3676C4,0xDAF3D22C,0x740B9A43,0xAAE3AD8D,0xCEDA282D,
    0xFD50A83A,0xEA9439E4,0x26A33D44,0xFEC75050,0xE2A33ACE,0xB032C168,0xC3C44421,0x18C4549B,
    0xD5E6B497,0xDB5FF101,0xE8898F32,0x285251E6,0x543BD9D8,0x12D5510B,0x7A0BA876,0x1481E26F,
    0x5614E95E,0xE4D2878D,0x39E1E283,0x775C074A,0x4FAD28E5,0x54871CD0,0xF27B9108,0xB4DFC314,
    0x9A41293B,0x879CEA49,0x7E5EC354,0xAB0E398C,0x49F1EE41,0x83F2E63A,0x39602215,0x5188A94E,
    0xD6BC9C30,0x00FF9BAB,0x88439B85,0x03DD204C,0x14D120BB,0x45037D5C,0xB1F0F0CF,0xC754C30C,
    0x09F1F0F4,0xDEA01784,0x01108D72,0x8892CBBC,0x00FFC182,0x079B9DA0,0xADA009D0,0x91DCBF0F,
    0xD1C8DE55,0x46BF0A48,0x701CA689,0xA8149409,0x4534E26E,0xD198EE99,0x71F0BB4E,0x30918829,
    0x2128289E,0x89C6841B,0xB709F7D8,0x251A3145,0x31A5F2CE,0x8734FD19,0x044141F1,0x4C34265E,
    0x63B61741,0x78773B45,0x766EA5F8,0xB682E2D6,0xA2E16020,0x21C14356,0x3FA895A2,0xACF97D52,
    0x33EDB417,0x4DD682E6,0x251AE5F0,0x7263A351,0x8668140D,0xA986FA76,0x7D3B4259,0xB41B5443,
    0x6A90A13B,0x3EF6F48A,0x47A5AA91,0xAC74866E,0xDC6FBBDD,0xDF2183E4,0xA946FAE8,0xA7C7DDD2,
    0xDDA94EF2,0x48F2EEB3,0x3E1BB681,0xBB5505EA,0x41F29393,0xC9D1DD86,0xDBE423F9,0x40DC1F0E,
    0xCE6CF710,0x1E8C5981,0x1754698E,0xA8D6BC0C,0xB331FA61,0x8FBA0D40,0x860CAA7F,0x684E0E8F,
    0xC8AC0DA4,0xC30EC316,0xE70D31C1,0x1324E3E8,0xDB0703B5,0xCC851108,0xD92AED3F,0x95F3D846,
    0xDA300E31,0x4A50FBE3,0xB4CFC2D7,0xCFC0A995,0x1619ACB6,0x8B5424E3,0x6D04C980,0x6C9FED4E,
    0xB3274420,0xB0AA416E,0x619AFE86,0xBA9FAC94,0x9D5583E2,0x56E4D087,0xAA434638,0x6E86F8E7,
    0x7C8400FF,0xE0D93D4C,0xC38DF582,0x6C382B2A,0xDE9E0B12,0x0DCFEC11,0x9E211153,0x00FFF9C8,
    0x3BDA0BDA,0x472B41BA,0xA914245E,0x1A50EC61,0x1484D8D3,0x00FFFBAE,0xF73E5A84,0x8D592C48,
    0x9EC64AD0,0x90FCBEC9,0xBEF7BD6C,0xEE7D5749,0xC466D591,0xFCBECD8E,0x0738B292,0xBB0E24BF,
    0xA63A32AF,0x07FE3A22,0x3A329B55,0x8AE4F7AD,0x06CD16BE,0x3E78DDC3,0xDDC35447,0xB0EA94DD,
    0xCF461D05,0xEAA80392,0x15446336,0x21C3750F,0x61E730D5,0x6D541DF4,0x16C10146,0x32981DCD
};

static const uint8_t AluminiumImgB[] = {
    3,
    0x41,0xFF,0xD9
};

// --- Function to copy the array(s) into the provided string buffer.
// --- Buffer size is not checked, as MakeCARR makes sure it's sufficient.
// ---------------------------------------------------------------------
void ReadAluminiumImgData(char *Buffer)
{
    memcpy(Buffer, &AluminiumImgL0[1], AluminiumImgL0[0] << 2);
    Buffer += (AluminiumImgL0[0] << 2);

    memcpy(Buffer, &AluminiumImgB[1], AluminiumImgB[0]);
}

// --- Saved full qualified output path and filename, so we've no troubles
// --- when cleaning up, even if the current working folder was changed
// --- during program runtime.
// ---------------------------------------------------------------------
char AluminiumImgName[8192]; // it's a safe size for any current OS

// --- Cleanup function to delete the written file, called by the atexit()
// --- handler at program termination time, if requested by user.
// ---------------------------------------------------------------------
void KillAluminiumImgData(void)
{
    remove(AluminiumImgName);
}

// --- Function to write the array(s) back into a file, will return the
// --- full qualified output path and filename on success, otherwise an
// --- empty string is returned (access/write errors, file truncated).
// ---------------------------------------------------------------------
const char *WriteAluminiumImgData(const char *FileName, int16_t AutoClean)
{
    FILE   *han = NULL; // file handle
    int32_t num = NULL; // written elements

    #ifdef QB64_WINDOWS
    if (!_fullpath(AluminiumImgName, FileName, 8192)) return "";
    #else
    if (!realpath(FileName, AluminiumImgName)) return "";
    #endif

    if (!(han = fopen(AluminiumImgName, "wb"))) return "";
    if (AutoClean) atexit(KillAluminiumImgData);

    num = fwrite(&AluminiumImgL0[1], 4, AluminiumImgL0[0], han);
    if (num != AluminiumImgL0[0]) {fclose(han); return "";}

    num = fwrite(&AluminiumImgB[1], 1, AluminiumImgB[0], han);
    if (num != AluminiumImgB[0]) {fclose(han); return "";}

    fclose(han);
    return AluminiumImgName;
}


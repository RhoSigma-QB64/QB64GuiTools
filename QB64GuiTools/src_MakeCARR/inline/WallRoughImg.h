// ============================================================
// === This file was created with MakeCARR.bas by RhoSigma, ===
// === use it in conjunction with its respective .bm file.  ===
// ============================================================

// --- Array(s) representing the contents of file WallRough.jpg
// ---------------------------------------------------------------------
static const uint32_t WallRoughImgL0[] = {
    600,
    0xE0FFD8FF,0x464A1000,0x01004649,0x01000001,0x00000100,0x4300DBFF,0x02020300,0x03020203,
    0x04030303,0x05040303,0x04050508,0x070A0504,0x0C080607,0x0B0C0C0A,0x0D0B0B0A,0x0D10120E,
    0x0B0E110E,0x1016100B,0x15141311,0x0F0C1515,0x14161817,0x15141218,0x00DBFF14,0x04030143,
    0x05040504,0x09050509,0x0D0B0D14,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,
    0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0xC0FF1414,
    0x00081100,0x03400040,0x02002201,0x11030111,0x00C4FF01,0x0200001A,0x00010103,0x00000000,
    0x00000000,0x04030000,0x00050201,0x00C4FF08,0x0200102D,0x01040102,0x04030303,0x00000003,
    0x02010000,0x00110403,0x13211205,0x06413122,0x42153214,0x24231651,0x71625261,0x1600C4FF,
    0x01010101,0x00000000,0x00000000,0x00000000,0x02010000,0x1B00C4FF,0x01010111,0x01010300,
    0x00000000,0x00000000,0x11010000,0x71413121,0x00DAFF61,0x0001030C,0x11031102,0xF7003F00,
    0xBC4F6EA3,0xB41D8F6D,0xAF7E47B7,0x5D47713C,0x443270EB,0x888B08AC,0xE5C895F4,0x063072EC,
    0x45AF6874,0xD7126EBA,0x659D729F,0x904465AE,0xBAD01CD3,0x186D3493,0x806372F5,0x713DE702,
    0xDEA153F7,0x5E4FAC91,0xB7E3B9B5,0x9261363C,0x3250CBA5,0xB9DCAE73,0x46109C65,0xE438487E,
    0xB7A9217F,0xB7376F1B,0xB8C92962,0xB0A42D19,0xCD0C85D9,0xC76E7814,0xB85512B7,0x83003FF1,
    0xE79D3582,0x90B48010,0xB642AFD6,0x46C72CE6,0x97B55E49,0x4F3EAB90,0x07488A22,0xD9639592,
    0xC01958CF,0x166E9AD6,0xC2DC5E6E,0x4892A6D8,0xF248228B,0x4B024C85,0x1C02FB22,0xF85F3CB8,
    0xD27BB23C,0xED8C5493,0x6408B7FC,0x6C691E49,0x7E2CBFD7,0x941E87A9,0x0C1949AE,0x933D793D,
    0x5CD4768F,0xB2EEE8DB,0x85DD82DB,0x96C06FB7,0xA09052D0,0x90AF5091,0x3C0F6096,0xE77CFD10,
    0x375DC139,0x9BD4F7C0,0xE16EDBA4,0xC67AE52E,0x217CC9D5,0xA14FAA24,0x588A2483,0x000C4910,
    0x1BD66B4E,0xAA33AE04,0xB94515C9,0x1309C572,0x68AC966F,0xD756CFD0,0x7C62099E,0x2423B023,
    0x901D9632,0x7EA40F0E,0x6A6E07ED,0xFE356DD0,0x719FDCDA,0xC91B7362,0x88815638,0x4F911420,
    0x832C2740,0xC99EFC83,0x56D9BE1A,0xD8BAE186,0xDB55904A,0x657974E7,0x1570AC78,0x9AAB2FAC,
    0x30ACA2E3,0xE31EB94F,0x009F0EA0,0xFBA71977,0x8AE0367B,0xD016D7B3,0xE173FB48,0x88E46461,
    0x0CB9C1EB,0x00D427B9,0x254812E8,0xA6B7D575,0xFBB1D05D,0x30B7A639,0x0DCAEA16,0xF9688A57,
    0x389EB97A,0x460EAA72,0xD2DFDB3D,0x0F6B0934,0x867193D2,0x973CF1E4,0xAB458E63,0x418D37C6,
    0x23885B2C,0x3AF471AE,0xEA1E19C8,0x6EB9A535,0x116FB40F,0x93B7354F,0xB104B36E,0x44FE8ED8,
    0x2698F0F5,0x5C5E5644,0x910428C2,0xE538C7F0,0x129981A6,0xBEB67FC8,0xCC118CDB,0x4F902297,
    0xDB5C4489,0xAE2762C8,0xE7904F5C,0x37E89504,0xDEAEA04D,0x7EE596BB,0x98D5B66D,0x62612D25,
    0xF0CA2A8A,0xAB72143A,0x0448CAF0,0x63AC7F60,0xB2FA5707,0x67D16DD0,0xD6ED24FD,0x75214822,
    0x0AA93AC2,0x82F815CC,0x4E86AEA7,0x8DF33130,0xB3256956,0x04F5D316,0x12284791,0xC1C753B4,
    0x5B924F14,0x988E89FB,0x91B12386,0xA9DD1FC4,0x5669227A,0x0D16C97D,0x8925EA9A,0xA7D81123,
    0x61CB68E5,0xC889C532,0xA3707262,0xB96C8FE0,0x953B77D1,0x9B6A88F7,0x870D4D12,0x5A4FEC69,
    0xD79248B4,0x42C8A00A,0xE3980515,0xF8916C39,0x2B1DC490,0x3FDE8425,0x534B6EBA,0x34E38A72,
    0x09365ACB,0x25F01827,0xDC80E838,0xDCE7B298,0xAA31CEB0,0xD3ECDCD8,0xB2EDADDA,0x64458151,
    0x49D1240F,0x550E4ECA,0xE44961C3,0x5F8EAA18,0x90EF401C,0x0E849B3A,0x8A20AA39,0xED536BE5,
    0x2D55C5FB,0x537C3612,0xA2EC0090,0xC1F17FE1,0x477DF2CF,0x6FD1BC4D,0xCF4BA5DB,0x529AA261,
    0x7C34CF17,0x55112916,0xB812C319,0x8FE3D423,0x23EE47FD,0xDB9DDB5A,0x66DB5CD2,0x7493D313,
    0x9E6411DB,0x29C66FE4,0x70A18243,0x4A6E4870,0x478EDA73,0x9DB4E9F1,0x94769F95,0xDAA821DA,
    0xD0224F56,0xD959B564,0xF54422FA,0xEC184F7E,0x671D7A02,0xA5334907,0x52DC5564,0x4A6C38B7,
    0x910A90BB,0xEC2856B0,0x4F82C08A,0x0A604810,0x4387FE81,0x6C680D82,0xAE55C4BB,0x64393D45,
    0x4FE9F6DC,0xAC73ACDB,0x80847266,0xC800A850,0xEC494FB8,0xB527A376,0x1A1E1BD4,0x76AFD9D0,
    0x88321C11,0x358A0616,0xC8223FF1,0x5C8E33E9,0xDDE2B74B,0x5DFB9191,0xB90F54B4,0xDCD3B26E,
    0x2776FA36,0x6DCAC385,0xE08C00FF,0x2B9B5DFA,0x13007585,0x60D8B3CB,0xD869A80F,0x8DCF6681,
    0xBC76DF4E,0x50586A76,0x07829445,0x507EBC11,0xB923E750,0x43704606,0xEB32AC63,0x3EABB5B6,
    0x073CF2E2,0x6F1ABC6A,0x4FC9B52C,0x80988812,0x2CBD3C13,0x3374E018,0xA906DC8F,0x44F7DE3E,
    0xA9DDD971,0xC96BA85C,0x48055915,0x50F18CE1,0xE00F053C,0x4E2C7A30,0x40C60832,0x862095D2,
    0x728F2CDB,0x463BDEBF,0x727EEED0,0x0C40C98F,0xD803AAB2,0x1DC86E76,0x1AEFD982,0x9BB5A8BF,
    0xA958A996,0xAD9B4C0B,0x9E478EA5,0x91E48B3B,0x4CE68A1F,0x42C50360,0x43A01B82,0xA375617B,
    0xFD3DFDBA,0x967B0C45,0x31ABB0C8,0xB90E3D41,0xD3C79347,0xE53AA0C7,0xD633FEEA,0xF573814E,
    0x827AC37D,0xD54B61A6,0xACB04650,0x0E2F7941,0x310674D0,0x8EA4CFD9,0xA0617A41,0xA47EFA54,
    0xBA54ED96,0x8079AB67,0xD789AA8A,0xBCCA2CC7,0x59877C8C,0xC7878E24,0x4B0D9C44,0x275DAC9E,
    0x89D8AA9E,0x7EA3D2EB,0x4A2A798D,0x1911DC92,0x0BE57062,0x8B01EB17,0xBA7A5D3F,0xBC4967E8,
    0x5C316D72,0xA7B4C59E,0x2264686F,0xC32FC7B4,0xEFA0B925,0x1E383923,0x00FF63F8,0xB056A213,
    0x4DCDFD90,0x0EF9EFC6,0xBA225DA9,0x84A54886,0x009962F2,0x824140FA,0xE707E39D,0x2429B59E,
    0xAF13ED92,0xA4966A9B,0x86EA4AC2,0xE0901C6F,0x61330097,0x61ABC8B1,0x385770B2,0x117A3AC9,
    0xDC905295,0xDB6F8320,0xE8B0502F,0xF8233F82,0x43709DE3,0xB1C238F3,0xDCE72066,0xD5199613,
    0xBE342CA8,0x4C4F80A4,0x7000FF0A,0x8009D6F5,0x286CE429,0x8261B78C,0xC89E51B1,0x46D403F7,
    0x6FAF6DA3,0x68A59675,0x4A6EC52B,0x990D9C88,0x52A0848C,0x15BC1BC1,0x19FBAE27,0x4AEB480A,
    0xD54EB3D8,0x582A2DDB,0xCBE41EDA,0x9CA8B562,0xB1CB6D7F,0x97030072,0xB8876EB1,0x49BD7EC7,
    0x76F4E1CE,0x3B7DEDDA,0x94269D0F,0x4856F6ED,0x22DBC6D6,0x576FD678,0x2CE36016,0x81202943,
    0xC639CBF3,0xDDA6FA9C,0x37B3A489,0x2D0DC5DD,0x099635C6,0x502F8667,0xDA381F53,0xB900C745,
    0x7EFB73F7,0x8392A471,0xB6374BD1,0xD6EC35FB,0xC16124AD,0x4B3EC4AF,0x18803802,0x2C865306,
    0xC89F2440,0xD9A3A7F7,0x5EC9EDAC,0xED2F3C0A,0x78872BD6,0x1013C753,0x399C9014,0x27AB2C16,
    0xD7718031,0xB75AA3F0,0x741B33C2,0xB6BF7287,0x3D4FE3FD,0xF01027A9,0x0D361A28,0x66908B18,
    0x043F64FC,0xD1779CFB,0x3DB5335D,0xDBDB6B09,0xFCC2A7E5,0x5EB3CC6A,0x20170773,0x4A8E008E,
    0xF5794CDC,0x8101F991,0xDD36A693,0x00FFD4CE,0x744FC34E,0xD28E368E,0xBF6C8184,0xB622A716,
    0x20A7B70A,0x587D20AF,0xC7F3F5F4,0x5990EE4A,0x5B6CFAAF,0x3443F2BC,0x1CB5217C,0x18130BD6,
    0x2351C22C,0x853C0E7A,0x24E3C772,0x6D678DFB,0xDF07A3EB,0x4F3F1B2A,0x1BA36CCE,0x74A46BDB,
    0x8F114D6C,0xDC884339,0x2457FB01,0x1FFD3EE7,0x6B89AE63,0xED60AF7E,0x4EB4C7C7,0x8D449A61,
    0x70613996,0x4F5EE408,0xEBC80F62,0x01F5B9B0,0xAE3258A1,0x099A62EF,0x23958A77,0x385F8E67,
    0x271E9278,0x010C7F20,0x11602018,0x9B1AFA8E,0xCF0EADAE,0x3824A83D,0x77DCB62F,0x0554B487,
    0xAB1D29D0,0xF909B07A,0x8E052318,0x552192B5,0x6DDF2EAD,0xB662CFAC,0x98AD79E4,0x80F2C2EC,
    0x0E3D8984,0x38B90441,0x19C13823,0x48763A3F,0x05D59667,0x78A5B5AF,0x5A53C15D,0x05098E52,
    0x822B53E3,0xC0816139,0x211F41C6,0x67DC5457,0x135CB6B1,0x9C1977F9,0xF56724CB,0x1AAD0C26,
    0x57201EB0,0xE420D701,0xF977BC7F,0xD5F6B76A,0xB841B5B7,0x56F25A52,0xEB213C13,0x5469E64D
};

static const uint8_t WallRoughImgB[] = {
    19,
    0x22,0xB2,0xB1,0x2A,0x00,0x5C,0x71,0x7C,0x8C,0x03,0x8C,0x16,0xEF,0x91,0xD2,0x73,
    0x28,0xFF,0xD9
};

// --- Function to copy the array(s) into the provided string buffer.
// --- Buffer size is not checked, as MakeCARR makes sure it's sufficient.
// ---------------------------------------------------------------------
void ReadWallRoughImgData(char *Buffer)
{
    memcpy(Buffer, &WallRoughImgL0[1], WallRoughImgL0[0] << 2);
    Buffer += (WallRoughImgL0[0] << 2);

    memcpy(Buffer, &WallRoughImgB[1], WallRoughImgB[0]);
}

// --- Saved full qualified output path and filename, so we've no troubles
// --- when cleaning up, even if the current working folder was changed
// --- during program runtime.
// ---------------------------------------------------------------------
char WallRoughImgName[8192]; // it's a safe size for any current OS

// --- Cleanup function to delete the written file, called by the atexit()
// --- handler at program termination time, if requested by user.
// ---------------------------------------------------------------------
void KillWallRoughImgData(void)
{
    remove(WallRoughImgName);
}

// --- Function to write the array(s) back into a file, will return the
// --- full qualified output path and filename on success, otherwise an
// --- empty string is returned (access/write errors, file truncated).
// ---------------------------------------------------------------------
const char *WriteWallRoughImgData(const char *FileName, int16_t AutoClean)
{
    FILE   *han = NULL; // file handle
    int32_t num = NULL; // written elements

    #ifdef QB64_WINDOWS
    if (!_fullpath(WallRoughImgName, FileName, 8192)) return "";
    #else
    if (!realpath(FileName, WallRoughImgName)) return "";
    #endif

    if (!(han = fopen(WallRoughImgName, "wb"))) return "";
    if (AutoClean) atexit(KillWallRoughImgData);

    num = fwrite(&WallRoughImgL0[1], 4, WallRoughImgL0[0], han);
    if (num != WallRoughImgL0[0]) {fclose(han); return "";}

    num = fwrite(&WallRoughImgB[1], 1, WallRoughImgB[0], han);
    if (num != WallRoughImgB[0]) {fclose(han); return "";}

    fclose(han);
    return WallRoughImgName;
}


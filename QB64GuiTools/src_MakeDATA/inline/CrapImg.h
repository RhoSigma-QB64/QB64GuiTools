// ============================================================
// === This file was created with MakeCARR.bas by RhoSigma, ===
// === use it in conjunction with its respective .bm file.  ===
// ============================================================

// --- Array(s) representing the contents of file Crap.jpg
// ---------------------------------------------------------------------
static const uint32_t CrapImgL0[] = {
    368,
    0xE0FFD8FF,0x464A1000,0x01004649,0x01000001,0x00000100,0x4300DBFF,0x02020300,0x03020203,
    0x04030303,0x05040303,0x04050508,0x070A0504,0x0C080607,0x0B0C0C0A,0x0D0B0B0A,0x0D10120E,
    0x0B0E110E,0x1016100B,0x15141311,0x0F0C1515,0x14161817,0x15141218,0x00DBFF14,0x04030143,
    0x05040504,0x09050509,0x0D0B0D14,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,
    0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0x14141414,0xC0FF1414,
    0x00081100,0x03400043,0x02002201,0x11030111,0x00C4FF01,0x03000019,0x00010101,0x00000000,
    0x00000000,0x02010000,0x08040003,0x3800C4FF,0x01020010,0x04040402,0x09030404,0x00000000,
    0x03020100,0x12041100,0x41133121,0x5122A191,0x6105B181,0x2314C171,0x7242D132,0x52343382,
    0xC2B2A292,0xC4FFF1E1,0x01011600,0x00000101,0x00000000,0x00000000,0x00000000,0xC4FF0201,
    0x01111D00,0x02000101,0x00000302,0x00000000,0x00000000,0x31211101,0x61514102,0x00DAFF71,
    0x0001030C,0x11031102,0xF5003F00,0x4808B7C2,0x906411D2,0x00200712,0xDA2DF3E7,0x3C8A0F97,
    0xCA489E14,0x1D2AB320,0x943E8FCD,0xE132D898,0x108B3926,0xC8DCC257,0x55FA1BBB,0x110C990A,
    0x2070BC29,0xE499C7CE,0x0333292B,0x5D9960E1,0x3A041AA5,0xB76D6C1E,0x0781D0D0,0xADCC200E,
    0x6FA4CE34,0xBD8DAD61,0xC82AFD0D,0xECC88063,0xF9804041,0xC97D94E9,0x2D346CAE,0xC81B2A3E,
    0x41E43373,0xDED7006D,0xDADDE4D4,0xA298F3B4,0x99C9DE55,0xA69C1B88,0x804F2DFD,0x9D98B139,
    0xD0BF4434,0xF3796BED,0x23AE48E9,0x314E63CE,0xF389DD4B,0x06F59ED4,0xA9F3F0C5,0x3C2ACD6F,
    0x9DC45E00,0x36493409,0x97D2481C,0x1054FA0B,0xCFD7F65A,0x464671B7,0x4A86972F,0xDC35E6A9,
    0xD51ED8DF,0x85450A31,0x25C17838,0xCECD45EC,0xFC27A153,0x4831AAB7,0x921B1950,0xDFB62D00,
    0x821A4E71,0x814A23F2,0xF41BCAEE,0x3E813DAF,0xE0D47BB9,0x22AF34C4,0xCA162184,0xE94A6EA0,
    0x4F00FF7B,0x28C22C7A,0x2EF60AA5,0xAAF9D9C5,0x5B753A85,0xC20B54D7,0xA28E34C3,0x07E56B35,
    0x00FFAE73,0xEAD0BB2D,0x21158639,0x973CC79C,0x35A81609,0xEE6504B9,0x928D896A,0xE40A6934,
    0x255A1969,0x40C3E602,0xE9B5573E,0x14DE6130,0x23534E9D,0xCFB7B12A,0x9EA6745B,0xD3C0C375,
    0x402C0DA9,0xDBCE2704,0xA96ADBFA,0x49C5539B,0x8D6060F8,0xCEE2C903,0x7DC4DA41,0x850D5B8D,
    0xB0333B31,0x5BCC0A16,0xA7EE3FE4,0x8600FFF0,0x8D81CC2A,0x633ECBC5,0x750A89FA,0x282E4DE9,
    0xDC1A8934,0x6DCC9CBB,0x713F007B,0xEA1B5A6F,0x5C989218,0x266FAA4C,0x00257F51,0x488AFA9D,
    0xB3421121,0xEA6C2649,0xDADEC80D,0x18353777,0x78F8886D,0x2A875C88,0xC97C3E24,0x739255EF,
    0x1E258639,0x6C7BED28,0xEB73C5A3,0x652454FB,0xB1102ECD,0xDFD8D800,0x3AB5A16C,0xAD4EABFC,
    0x392C7C8A,0x561C37FC,0x8EDC2BB7,0x61D3F4A2,0x44424CD6,0x400081D2,0xEB00F309,0xA5D47AEC,
    0x325987C5,0x1DD47DA9,0xDAEB84BF,0x633E8BF4,0x4C160CA3,0x8044DCA0,0x31F15F95,0xD43BEC03,
    0xC030D0B0,0x9DC59A4F,0xD3B0B1F4,0x280A7A40,0x8A570C25,0x001DF557,0xA5C65ED0,0x158F558A,
    0x86756904,0x1E5CD438,0xE29E0076,0x7CA73989,0x86A35960,0xF100ED3F,0xFC7FEDB2,0x78B0A93D,
    0x7339C375,0x28142120,0x9ED8641E,0x6524BDE3,0x0A15CE60,0x8FA536C9,0x6EBBADF0,0x68A9B32A,
    0xC920355A,0x5F4EDF72,0x87D627F0,0x123A7CD0,0xBF9C95CB,0x877EEC8E,0x84DAF65F,0x24C385B8,
    0x6C7E54A1,0x20372E81,0xD2937B58,0x522CD1A8,0x2512AE10,0xF4BD39BB,0x6A7F5FFD,0x233BC4E6,
    0xB988C0E1,0x616B8B8D,0x7BEE36B9,0xC5D19C50,0xC94C904B,0x882C1C19,0x1A09204F,0xC2E95A74,
    0x71C32142,0xC1359025,0x9BA40E62,0x5CEB4000,0x129B63D2,0x68A692AA,0x148C789D,0x7BF9F75A,
    0x437CD17A,0x15729D4B,0x7E0165F1,0xEF650FAC,0xBF31CE45,0xC681D814,0x084916CA,0xCF2D7F41,
    0xC35635B1,0x923C1718,0x44571D71,0xDFDCDAB6,0x844B61EB,0xC8F00B03,0xE52E814D,0xC6CE110B,
    0x6A1F80FE,0xECD8C09B,0xE2784146,0xB6D77261,0x4B3F356D,0x56A4AA7D,0x04CB9869,0x03ACC562,
    0x8FC53C10,0x36BA2870,0x2373A429,0xA5120B43,0x096AABAF,0x2F5A0FEC,0x2534781C,0x16646980,
    0x83A00E0A,0xF5B7E8A0,0x78AC90A5,0x64438E87,0x4D154B85,0x0B883573,0xFC449AFE,0x48A1084E,
    0xB29C9565,0x705360E5,0xA003B009,0xCF43FCA7,0xC78A442E,0xAF4FCC31,0x267950DC,0x378495C4,
    0x27D71002,0xA9D7B073,0x2CF17014,0x786089CB,0xBDF79C80,0x1DB809AC,0x7098140D,0x5744C523,
    0xA72F1A4F,0x4A8EAE12,0x67894D46,0xEC8DE492,0xA956AB45,0xC02E5F3A,0x2C1A2E9E,0x4750E5FA,
    0x989DD6A9,0xAE13BBBB,0x3F961E55,0x8C5AADB0,0x7FB19C4E,0xA78E8979,0x755DC788,0x336A8FBA,
    0x5EF91831,0xFFDE2BFE,0x562BD400,0x666C5BAB,0x96B67698,0xC7CADFBE,0x60B40ADC,0x68500D2E
};

static const uint8_t CrapImgB[] = {
    11,
    0xB9,0x54,0xE9,0xFC,0xC0,0x56,0xAD,0x51,0x1F,0xFF,0xD9
};

// --- Function to copy the array(s) into the provided string buffer.
// --- Buffer size is not checked, as MakeCARR makes sure it's sufficient.
// ---------------------------------------------------------------------
void ReadCrapImgData(char *Buffer)
{
    memcpy(Buffer, &CrapImgL0[1], CrapImgL0[0] << 2);
    Buffer += (CrapImgL0[0] << 2);

    memcpy(Buffer, &CrapImgB[1], CrapImgB[0]);
}

// --- Saved full qualified output path and filename, so we've no troubles
// --- when cleaning up, even if the current working folder was changed
// --- during program runtime.
// ---------------------------------------------------------------------
char CrapImgName[8192]; // it's a safe size for any current OS

// --- Cleanup function to delete the written file, called by the atexit()
// --- handler at program termination time, if requested by user.
// ---------------------------------------------------------------------
void KillCrapImgData(void)
{
    remove(CrapImgName);
}

// --- Function to write the array(s) back into a file, will return the
// --- full qualified output path and filename on success, otherwise an
// --- empty string is returned (access/write errors, file truncated).
// ---------------------------------------------------------------------
const char *WriteCrapImgData(const char *FileName, int16_t AutoClean)
{
    FILE   *han = NULL; // file handle
    int32_t num = NULL; // written elements

    #ifdef QB64_WINDOWS
    if (!_fullpath(CrapImgName, FileName, 8192)) return "";
    #else
    if (!realpath(FileName, CrapImgName)) return "";
    #endif

    if (!(han = fopen(CrapImgName, "wb"))) return "";
    if (AutoClean) atexit(KillCrapImgData);

    num = fwrite(&CrapImgL0[1], 4, CrapImgL0[0], han);
    if (num != CrapImgL0[0]) {fclose(han); return "";}

    num = fwrite(&CrapImgB[1], 1, CrapImgB[0], han);
    if (num != CrapImgB[0]) {fclose(han); return "";}

    fclose(han);
    return CrapImgName;
}


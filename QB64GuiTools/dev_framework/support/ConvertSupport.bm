'+---------------+---------------------------------------------------+
'| ###### ###### |     .--. .         .-.                            |
'| ##  ## ##   # |     |   )|        (   ) o                         |
'| ##  ##  ##    |     |--' |--. .-.  `-.  .  .-...--.--. .-.        |
'| ######   ##   |     |  \ |  |(   )(   ) | (   ||  |  |(   )       |
'| ##      ##    |     '   `'  `-`-'  `-'-' `-`-`|'  '  `-`-'`-      |
'| ##     ##   # |                            ._.'                   |
'| ##     ###### | Sources & Documents placed under the MIT License. |
'+---------------+---------------------------------------------------+
'|                                                                   |
'| === ConvertSupport.bm ===                                         |
'|                                                                   |
'| == This include file is part of the GuiTools Framework Project.   |
'| == It provides some useful SUBs/FUNCTIONs to convert point coor-  |
'| == dinates and some to convert colors between colorspace models.  |
'|                                                                   |
'+-------------------------------------------------------------------+
'| Done by RhoSigma, R.Heyder, provided AS IS, use at your own risk. |
'| Find me in the QB64 Forum or mail to support@rhosigma-cw.net for  |
'| any questions or suggestions. Thanx for your interest in my work. |
'+-------------------------------------------------------------------+

'--- docs\doc_ConvertSupport.bm\PolToCartXY.html
'---------------------------------------------------------------------
FUNCTION PolToCartX% (ang!, rad!)
PolToCartX% = CINT(rad! * COS(ang! * 0.017453292519943))
END FUNCTION

'--- docs\doc_ConvertSupport.bm\PolToCartXY.html
'---------------------------------------------------------------------
FUNCTION PolToCartY% (ang!, rad!)
PolToCartY% = CINT(rad! * SIN(ang! * 0.017453292519943))
END FUNCTION

'--- docs\doc_ConvertSupport.bm\CartToPolAR.html
'---------------------------------------------------------------------
FUNCTION CartToPolA! (xPos%, yPos%)
IF yPos% = 0 THEN
    IF xPos% >= 0 THEN bow! = 0: ELSE bow! = 3.141592653589793
ELSE
    IF xPos% = 0 THEN bow! = 1.570796326794896 * SGN(yPos%): ELSE bow! = 2 * ATN(yPos% / (SQR((xPos% * xPos%) + (yPos% * yPos%)) + xPos%))
END IF
ang! = bow! / 0.017453292519943
IF ang! < 0 THEN ang! = ang! + 360
CartToPolA! = ang!
END FUNCTION

'--- docs\doc_ConvertSupport.bm\CartToPolAR.html
'---------------------------------------------------------------------
FUNCTION CartToPolR! (xPos%, yPos%)
CartToPolR! = SQR((xPos% * xPos%) + (yPos% * yPos%))
END FUNCTION

'--- docs\doc_ConvertSupport.bm\MovePointXY.html
'---------------------------------------------------------------------
FUNCTION MovePointX% (xPos%, yPos%, ang!, dist!)
tmpY% = yPos% 'avoid unused warning in QB64-GL v1.2 and up
MovePointX% = xPos% + PolToCartX%(ang!, dist!)
END FUNCTION

'--- docs\doc_ConvertSupport.bm\MovePointXY.html
'---------------------------------------------------------------------
FUNCTION MovePointY% (xPos%, yPos%, ang!, dist!)
tmpX% = xPos% 'avoid unused warning in QB64-GL v1.2 and up
MovePointY% = yPos% + PolToCartY%(ang!, dist!)
END FUNCTION

'--- docs\doc_ConvertSupport.bm\RotPointXY.html
'---------------------------------------------------------------------
FUNCTION RotPointX% (xPos%, yPos%, ang!, xCen%, yCen%)
tmpX% = xPos% - xCen%: tmpY% = yPos% - yCen%: bow! = ang! * 0.017453292519943
RotPointX% = CINT((tmpX% * COS(bow!)) - (tmpY% * SIN(bow!))) + xCen%
END FUNCTION

'--- docs\doc_ConvertSupport.bm\RotPointXY.html
'---------------------------------------------------------------------
FUNCTION RotPointY% (xPos%, yPos%, ang!, xCen%, yCen%)
tmpX% = xPos% - xCen%: tmpY% = yPos% - yCen%: bow! = ang! * 0.017453292519943
RotPointY% = CINT((tmpX% * SIN(bow!)) + (tmpY% * COS(bow!))) + yCen%
END FUNCTION

'--- docs\doc_ConvertSupport.bm\HSBA32.html
'---------------------------------------------------------------------
FUNCTION HSB32~& (hue!, sat!, bri!)
IF hue! < 0 THEN hue! = 0: ELSE IF hue! > 360 THEN hue! = 360
IF sat! < 0 THEN sat! = 0: ELSE IF sat! > 100 THEN sat! = 100
IF bri! < 0 THEN bri! = 0: ELSE IF bri! > 100 THEN bri! = 100
HSBtoRGB CLNG(hue! * 182.041666666666666#), CLNG(sat! * 655.35#), CLNG(bri! * 655.35#), red~&, gre~&, blu~&
HSB32~& = _RGB32(red~& \ 256, gre~& \ 256, blu~& \ 256)
END FUNCTION

'--- docs\doc_ConvertSupport.bm\HSBA32.html
'---------------------------------------------------------------------
FUNCTION HSBA32~& (hue!, sat!, bri!, alp%)
IF hue! < 0 THEN hue! = 0: ELSE IF hue! > 360 THEN hue! = 360
IF sat! < 0 THEN sat! = 0: ELSE IF sat! > 100 THEN sat! = 100
IF bri! < 0 THEN bri! = 0: ELSE IF bri! > 100 THEN bri! = 100
HSBtoRGB CLNG(hue! * 182.041666666666666#), CLNG(sat! * 655.35#), CLNG(bri! * 655.35#), red~&, gre~&, blu~&
HSBA32~& = _RGBA32(red~& \ 256, gre~& \ 256, blu~& \ 256, alp%)
END FUNCTION

'--- docs\doc_ConvertSupport.bm\HUE32-SAT32-BRI32.html
'---------------------------------------------------------------------
FUNCTION HUE32! (argbColor&)
RGBtoHSB (argbColor& AND &HFF0000~&) \ 256, (argbColor& AND &HFF00~&), (argbColor& AND &HFF~&) * 256, hue~&, sat~&, bri~&
HUE32! = hue~& / 182.041666666666666#
END FUNCTION

'--- docs\doc_ConvertSupport.bm\HUE32-SAT32-BRI32.html
'---------------------------------------------------------------------
FUNCTION SAT32! (argbColor&)
RGBtoHSB (argbColor& AND &HFF0000~&) \ 256, (argbColor& AND &HFF00~&), (argbColor& AND &HFF~&) * 256, hue~&, sat~&, bri~&
SAT32! = sat~& / 655.35#
END FUNCTION

'--- docs\doc_ConvertSupport.bm\HUE32-SAT32-BRI32.html
'---------------------------------------------------------------------
FUNCTION BRI32! (argbColor&)
RGBtoHSB (argbColor& AND &HFF0000~&) \ 256, (argbColor& AND &HFF00~&), (argbColor& AND &HFF~&) * 256, hue~&, sat~&, bri~&
BRI32! = bri~& / 655.35#
END FUNCTION

'--- docs\doc_ConvertSupport.bm\RGBtoHSB.html
'---------------------------------------------------------------------
SUB RGBtoHSB (red~&, gre~&, blu~&, hue~&, sat~&, bri~&)
IF red~& > gre~& THEN max~& = red~&: ELSE max~& = gre~&
IF blu~& > max~& THEN max~& = blu~&
IF red~& < gre~& THEN min~& = red~&: ELSE min~& = gre~&
IF blu~& < min~& THEN min~& = blu~&
diff~& = max~& - min~&

bri~& = max~&
IF max~& <> 0 THEN sat~& = diff~& * 65535 \ max~&: ELSE sat~& = 0

IF sat~& <> 0 THEN
    rc~& = (max~& - red~&) * 65535 \ diff~&
    gc~& = (max~& - gre~&) * 65535 \ diff~&
    bc~& = (max~& - blu~&) * 65535 \ diff~&

    IF red~& = max~& THEN
        h& = bc~& - gc~&
        IF h& < 0 THEN h& = h& + 393210 '(6 * 65535)
    ELSEIF gre~& = max~& THEN
        h& = 131070 + rc~& - bc~& '(2 * 65535)
    ELSE
        h& = 262140 + gc~& - rc~& '(4 * 65535)
    END IF
    hue~& = h& \ 6
ELSE
    hue~& = 0
END IF
END SUB

'--- docs\doc_ConvertSupport.bm\HSBtoRGB.html
'---------------------------------------------------------------------
SUB HSBtoRGB (hue~&, sat~&, bri~&, red~&, gre~&, blu~&)
IF sat~& = 0 THEN
    red~& = bri~&: gre~& = bri~&: blu~& = bri~&
ELSE
    v~& = bri~&
    i~& = hue~& \ 10923 '(65535 \ 6) + 1
    f~& = (hue~& MOD 10923) * 6 '(65535 \ 6) + 1
    f~& = f~& + (f~& \ 16384) '(65536 \ 4)

    p~& = bri~& * (65535 - sat~&) \ 65536
    q~& = bri~& * (65535 - ((sat~& * f~&) \ 65536)) \ 65536
    t~& = bri~& * (65535 - ((sat~& * (65535 - f~&)) \ 65536)) \ 65536

    SELECT CASE i~&
        CASE 0: red~& = v~&: gre~& = t~&: blu~& = p~&
        CASE 1: red~& = q~&: gre~& = v~&: blu~& = p~&
        CASE 2: red~& = p~&: gre~& = v~&: blu~& = t~&
        CASE 3: red~& = p~&: gre~& = q~&: blu~& = v~&
        CASE 4: red~& = t~&: gre~& = p~&: blu~& = v~&
        CASE 5: red~& = v~&: gre~& = p~&: blu~& = q~&
    END SELECT
END IF
END SUB


'+---------------+---------------------------------------------------+
'| ###### ###### |     .--. .         .-.                            |
'| ##  ## ##   # |     |   )|        (   ) o                         |
'| ##  ##  ##    |     |--' |--. .-.  `-.  .  .-...--.--. .-.        |
'| ######   ##   |     |  \ |  |(   )(   ) | (   ||  |  |(   )       |
'| ##      ##    |     '   `'  `-`-'  `-'-' `-`-`|'  '  `-`-'`-      |
'| ##     ##   # |                            ._.'                   |
'| ##     ###### | Sources & Documents placed under the MIT License. |
'+---------------+---------------------------------------------------+
'|                                                                   |
'| === PackSupport.bm ===                                            |
'|                                                                   |
'| == This include file is part of the GuiTools Framework Project.   |
'| == It provides adaptive (9-12 bits) LZW packing and unpacking.    |
'|                                                                   |
'+-------------------------------------------------------------------+
'| Done by RhoSigma, R.Heyder, provided AS IS, use at your own risk. |
'| Find me in the QB64 Forum or mail to support@rhosigma-cw.net for  |
'| any questions or suggestions. Thanx for your interest in my work. |
'+-------------------------------------------------------------------+

'--- docs\doc_PackSupport.bm\LzwPack.html
'---------------------------------------------------------------------
FUNCTION LzwPack$ (SourceData$, MinRatio%)
'--- so far, return failure ---
LzwPack$ = ""

'--- get/check source ---
SourceLen& = LEN(SourceData$)
IF SourceLen& < 64 THEN EXIT FUNCTION 'not worth the effort
SourcePos& = 1
'--- set/check target ---
IF MinRatio% < 0 THEN MinRatio% = 0
IF MinRatio% > 99 THEN MinRatio% = 99
TargetBuf$ = SPACE$((SourceLen& * ((100 - MinRatio%) / 100)) + 32)
TargetLen& = LEN(TargetBuf$) - 33 - 16 '16 = Id + Len + CRC32
IF TargetLen& <= 0 THEN EXIT FUNCTION 'impossible to deal with
TargetPos& = 1

'--- init LZW ---
REDIM PrefArr%(0 TO 6576), SuffArr%(0 TO 6576), CodeArr%(0 TO 6576), UsedArr&(0 TO 4096)

gate& = 0 'bitshift gateway to target
gateBit% = 0 'current bit position in gate&
codeSize% = 9 'start with 9 bits code size
maxCode% = 512 'maximum code that fits in 9 bits

'Compression codes:
'Code 256 = end of file
'Code 257 = increase code size
'Code 258 = rebuild table
'Code 259 - 4095 = available for strings
firstCode% = 259 'first LZW code available
nextCode% = 259

'--- clear Hash table & get first byte ---
$CHECKING:OFF
GOSUB ClearTable
prefix% = ASC(SourceData$, SourcePos&)
SourcePos& = SourcePos& + 1

'--- main compression loop ---
pObj% = VAL(GetTagData$(lzwProgress$, "OBJECT", "0"))
IF pObj% < 1 THEN pObj% = 0: lzwProgress$ = ""
pGui% = (appScreen& < -1) AND (pObj% > 0)
IF pGui% THEN UpdateGuiViews: _DISPLAY: stim# = TIMER(0.001)
DO
    DO
        IF TargetPos& > TargetLen& THEN 'min. ratio overflow?
            ERASE PrefArr%, SuffArr%, CodeArr%, UsedArr&
            IF pGui% THEN
                res$ = GenC$("SET", lzwProgress$ + NewTag$("LEVEL", "100"))
                lzwProgress$ = "": UpdateGuiViews: _AUTODISPLAY
            END IF
            EXIT FUNCTION
        ELSEIF SourcePos& > SourceLen& THEN 'all done?
            pcCode% = prefix%: GOSUB PutCode 'put final byte to output
            pcCode% = 256: GOSUB PutCode 'send "end of file" code to decompressor
            pcCode% = 0: GOSUB PutCode: GOSUB PutCode 'and flush entire gateway
            ERASE PrefArr%, SuffArr%, CodeArr%, UsedArr&
            LzwPack$ = LEFT$(TargetBuf$, TargetPos& - 1) + "QB64LZW1" + MKL$(SourceLen&) + MKL$(GetCRC32&(SourceData$))
            IF pGui% THEN
                res$ = GenC$("SET", lzwProgress$ + NewTag$("LEVEL", "100"))
                lzwProgress$ = "": UpdateGuiViews: _AUTODISPLAY
            END IF
            EXIT FUNCTION
        ELSE
            suffix% = ASC(SourceData$, SourcePos&)
            SourcePos& = SourcePos& + 1
            '--- search prefix:suffix on Hash table ---
            stPre% = prefix%: stSuf% = suffix%
            GOSUB SearchTable
            index% = stIdx%: found% = stFlg%
            '--- update values, if found ---
            IF found% THEN
                prefix% = CodeArr%(index%)
                UsedArr&(prefix%) = UsedArr&(prefix%) + 1
            END IF
        END IF
        IF pGui% THEN
            etim# = TIMER(0.001) - stim#
            IF etim# < 0 THEN etim# = etim# + 86400 'midnight fix
            IF etim# >= 0.04 THEN
                res$ = GenC$("SET", lzwProgress$ + NewTag$("LEVEL", LTRIM$(STR$(CINT(100 / SourceLen& * SourcePos&)))))
                UpdateGuiViews: _DISPLAY: stim# = TIMER(0.001)
            END IF
        END IF
    LOOP WHILE found%

    '--- for following output, increase code size if required ---
    WHILE prefix% >= maxCode% AND codeSize% < 12
        pcCode% = 257: GOSUB PutCode 'send "increase code size" code to decompressor
        maxCode% = maxCode% * 2
        codeSize% = codeSize% + 1
    WEND

    '--- if no Hash entry was found above, then put prefix byte to output ---
    pcCode% = prefix%: GOSUB PutCode
    '--- then put the new string on Hash table ---
    PrefArr%(index%) = prefix%
    SuffArr%(index%) = suffix%
    CodeArr%(index%) = nextCode%
    '--- and finally set prefix to the byte that caused the search failure ---
    prefix% = suffix%

    '--- if there are too many strings then rebuild the Hash table ---
    nextCode% = nextCode% + 1
    IF nextCode% > 4096 THEN
        pcCode% = 258: GOSUB PutCode 'send "rebuild table" code to decompressor
        '-----
        GOSUB RebuildTable: newEntries% = rtNewEnt%
        nextCode% = newEntries% + firstCode%
        '-----
        IF nextCode% > 4096 THEN
            GOSUB ClearTable
            nextCode% = firstCode% 'reset next code to top of tree
        END IF
        '--- reset gateway controls ---
        codeSize% = 9
        maxCode% = 512
    END IF
LOOP
'--- we should never reach this point, $CHECKING must be switched ---
'--- ON here, so the program is able to recognize the ERROR event ---
$CHECKING:ON
ERROR 97
STOP
$CHECKING:OFF
'--- after that we can proceed with $CHECKING:OFF until function end ---

'---------------
'--- PutCode ---
'---------------
' This subroutine throws one multi-bit code to the output.
'----------
' INPUTS:
'   --- pcCode% ---
'    Place the code to write into pcCode% before the GOSUB call.
'---------------------------------------------------------------------
PutCode:
gate& = gate& + (pcCode% * (2 ^ gateBit%))
gateBit% = gateBit% + codeSize%
WHILE gateBit% > 7
    MID$(TargetBuf$, TargetPos&) = CHR$(gate& AND 255)
    TargetPos& = TargetPos& + 1
    gate& = gate& \ 256
    gateBit% = gateBit% - 8
WEND
RETURN

'------------------
'--- ClearTable ---
'------------------
' This subroutine will clear the Hash table.
'---------------------------------------------------------------------
ClearTable:
FOR ctI% = 0 TO 6576
    PrefArr%(ctI%) = -1
    SuffArr%(ctI%) = -1
    CodeArr%(ctI%) = -1
NEXT ctI%
RETURN

'-------------------
'--- SearchTable ---
'-------------------
' This subroutine attempts to find the given prefix:suffix string on
' the Hash table.
'----------
' INPUTS:
'   --- stPre% ---
'   --- stSuf% ---
'    Place prefix and suffix into stPre% and stSuf% respectivly
'    before the GOSUB call.
'----------
' RESULTS:
'   --- stFlg% ---
'    Shows whether an entry was found or not.
'   --- stIdx% ---
'    The found Hash index, but only if stFlg% is true.
'---------------------------------------------------------------------
SearchTable:
stIdx% = ((stPre% * 256) XOR stSuf%) MOD 6577 'XOR hashing
IF stIdx% = 0 THEN 'is index lucky enough to be 0?
    stOff% = 1 'Set offset to 1, because 6577-0=6577
ELSE
    stOff% = 6577 - stIdx%
END IF
DO 'until we find a match or don't
    IF CodeArr%(stIdx%) = -1 THEN 'is there nothing here?
        stFlg% = 0 'yup, not found
        RETURN
    ELSEIF PrefArr%(stIdx%) = stPre% AND SuffArr%(stIdx%) = stSuf% THEN 'is this what we're looking for?
        stFlg% = -1 'yup, found
        RETURN
    ELSE 'retry until we find what we're looking for or we find a blank entry
        stIdx% = stIdx% - stOff%
        IF stIdx% < 0 THEN 'is index too far down?
            stIdx% = stIdx% + 6577 'yup, bring it up then
        END IF
    END IF
LOOP
RETURN 'well, another point we shouln't reach

'--------------------
'--- RebuildTable ---
'--------------------
' This subroutine eliminates any strings which are not used in the Hash
' table. The usual result of doing this is greater compression.
'----------
' RESULT:
'   --- rtNewEnt% ---
'    Returns the new number of entries on Hash table.
'---------------------------------------------------------------------
RebuildTable:
REDIM rtPreArr%(0 TO 4096), rtSufArr%(0 TO 4096), rtUseArr&(0 TO 4096)
REDIM rtPnArr%(0 TO 4096), rtCodArr%(0 TO 4096), rtLocArr%(0 TO 4096)

rtNumEnt% = 0

'--- build a temporary Hash table ---
FOR rtI% = 0 TO 6576
    rtCod% = CodeArr%(rtI%)
    IF rtCod% <> -1 THEN 'valid code?
        IF UsedArr&(rtCod%) > 0 THEN 'was it used at all?
            UsedArr&(rtCod%) = 0
            rtPre% = PrefArr%(rtI%)
            rtSuf% = SuffArr%(rtI%)
            rtPreArr%(rtNumEnt%) = rtPre% 'put it on temporary table
            rtSufArr%(rtNumEnt%) = rtSuf%
            rtUseArr&(rtNumEnt%) = rtPre% * 4096 + rtSuf%
            rtCodArr%(rtCod%) = rtNumEnt%
            rtNumEnt% = rtNumEnt% + 1
        END IF
    END IF
NEXT rtI%

'--- init help indices ---
rtNumEnt% = rtNumEnt% - 1
FOR rtI% = 0 TO rtNumEnt%
    rtPnArr%(rtI%) = rtI%
NEXT rtI%
'--- sort the table according to it's prefix:suffix ---
rtMid% = rtNumEnt% \ 2
DO
    FOR rtI% = 0 TO rtNumEnt% - rtMid%
        IF rtUseArr&(rtPnArr%(rtI%)) > rtUseArr&(rtPnArr%(rtI% + rtMid%)) THEN
            SWAP rtPnArr%(rtI%), rtPnArr%(rtI% + rtMid%)
            rtCmpLO% = rtI% - rtMid%
            rtCmpHI% = rtI%
            WHILE rtCmpLO% >= 0
                IF rtUseArr&(rtPnArr%(rtCmpLO%)) > rtUseArr&(rtPnArr%(rtCmpHI%)) THEN
                    SWAP rtPnArr%(rtCmpLO%), rtPnArr%(rtCmpHI%)
                    rtCmpHI% = rtCmpLO%
                    rtCmpLO% = rtCmpLO% - rtMid%
                ELSE
                    EXIT WHILE
                END IF
            WEND
        END IF
    NEXT rtI%
    rtMid% = rtMid% \ 2
LOOP WHILE rtMid% > 0
'--- get new locations ---
FOR rtI% = 0 TO rtNumEnt%
    rtLocArr%(rtPnArr%(rtI%)) = rtI%
NEXT

GOSUB ClearTable
'--- put each prefix:suffix back into the main Hash table ---
FOR rtJ% = 0 TO rtNumEnt%
    rtI% = rtPnArr%(rtJ%)
    '-----
    rtPre% = rtPreArr%(rtI%)
    rtSuf% = rtSufArr%(rtI%)
    IF rtPre% >= firstCode% THEN 'is it pointing twards a string?
        rtPre% = firstCode% + rtLocArr%(rtCodArr%(rtPre%)) 'yup, update the pointer
    END IF
    IF rtSuf% >= firstCode% THEN
        rtSuf% = firstCode% + rtLocArr%(rtCodArr%(rtSuf%))
    END IF
    '--- where does this prefix:suffix go? ---
    stPre% = rtPre%: stSuf% = rtSuf%: GOSUB SearchTable: rtIdx% = stIdx%
    '-----
    PrefArr%(rtIdx%) = rtPre% 'put it there
    SuffArr%(rtIdx%) = rtSuf%
    CodeArr%(rtIdx%) = rtJ% + firstCode%
NEXT rtJ%

rtNewEnt% = rtNumEnt% + 1 'number of entries on the Hash table now

ERASE rtPreArr%, rtSufArr%, rtUseArr&
ERASE rtPnArr%, rtCodArr%, rtLocArr%
RETURN
$CHECKING:ON
END FUNCTION

'--- docs\doc_PackSupport.bm\LzwUnpack.html
'---------------------------------------------------------------------
FUNCTION LzwUnpack$ (LzwData$)
'--- so far, return failure ---
LzwUnpack$ = ""

'--- get/check source ---
LzwLen& = LEN(LzwData$)
IF LzwLen& < 16 THEN EXIT FUNCTION 'can't be from LzwPack$()
LzwPos& = 1
LzwSig$ = RIGHT$(LzwData$, 16)
IF LEFT$(LzwSig$, 8) <> "QB64LZW1" THEN EXIT FUNCTION 'isn't from LzwPack$()
'--- set/check target ---
TargetBuf$ = SPACE$(CVL(MID$(LzwSig$, 9, 4)))
TargetLen& = LEN(TargetBuf$)
IF TargetLen& = 0 THEN EXIT FUNCTION 'nothing to unpack
TargetPos& = 1

'--- init LZW ---
REDIM PrefArr%(0 TO 4096), SuffArr%(0 TO 4096), UsedArr&(0 TO 4096)

gate& = 0 'bitshift gateway from input
gateBits% = 0 'available data bits in gate&
codeSize% = 9 'start with 9 bits code size

REDIM stack%(0 TO 4096) 'reverse output stack
stackCnt% = 0 'current stack index

'Compression codes:
'Code 256 = end of file
'Code 257 = increase code size
'Code 258 = rebuild table
'Code 259 - 4095 = available for strings
firstCode% = 259 'first LZW code available
nextCode% = 259

'--- get first code ---
$CHECKING:OFF
GOSUB GetCode: code% = gcCode%
curCode% = code%
oldCode% = code%
finChar% = code%
pbByte% = finChar%: GOSUB PutByte

'--- main decompression loop ---
pObj% = VAL(GetTagData$(lzwProgress$, "OBJECT", "0"))
IF pObj% < 1 THEN pObj% = 0: lzwProgress$ = ""
pGui% = (appScreen& < -1) AND (pObj% > 0)
IF pGui% THEN UpdateGuiViews: _DISPLAY: stim# = TIMER(0.001)
DO
    '--- get next code from input ---
    GOSUB GetCode: code% = gcCode%
    '--- process codes ---
    SELECT CASE code%
        CASE 256 'code "end of file"
            upStr$ = LEFT$(TargetBuf$, TargetPos& - 1)
            ERASE PrefArr%, SuffArr%, UsedArr&, stack%
            IF CVL(MID$(LzwSig$, 13, 4)) = GetCRC32&(upStr$) THEN LzwUnpack$ = upStr$ 'data ok
            IF pGui% THEN
                res$ = GenC$("SET", lzwProgress$ + NewTag$("LEVEL", "100"))
                lzwProgress$ = "": UpdateGuiViews: _AUTODISPLAY
            END IF
            EXIT FUNCTION
        CASE 257 'code "increase code size"
            codeSize% = codeSize% + 1
        CASE 258 'code "rebuild table"
            GOSUB RebuildTable: newEntries% = rtNewEnt%
            nextCode% = newEntries% + firstCode%
            codeSize% = 9 'reset code size
            '-----
            IF nextCode% > 4096 THEN
                nextCode% = firstCode%
                '-----
                GOSUB GetCode: code% = gcCode%
                '-----
                curCode% = code%
                oldCode% = code%
                finChar% = code%
                pbByte% = finChar%: GOSUB PutByte
            ELSE
                ignore% = -1 'prevent invalid codes entering the table
            END IF
        CASE ELSE 'string code
            curCode% = code%
            inCode% = code%
            '--- do we have this string yet? ---
            IF code% >= nextCode% THEN
                '--- if code%>nextCode% then stop decompression, ---
                '--- because this can't be right! ---
                IF code% > nextCode% THEN
                    ERASE PrefArr%, SuffArr%, UsedArr&, stack%
                    IF pGui% THEN
                        res$ = GenC$("SET", lzwProgress$ + NewTag$("LEVEL", "100"))
                        lzwProgress$ = "": UpdateGuiViews: _AUTODISPLAY
                    END IF
                    EXIT FUNCTION
                END IF
                '--- trick decompressor to use last code ---
                UsedArr&(code%) = UsedArr&(code%) + 1
                curCode% = oldCode%
                stack%(stackCnt%) = finChar%
                stackCnt% = stackCnt% + 1
            END IF
            '--- does this code represent a string? ---
            IF curCode% >= firstCode% THEN
                '--- get each byte from the table and push it onto the stack, ---
                '--- keep on doing this until we have a normal ASCII (0-255)  ---
                DO
                    UsedArr&(curCode%) = UsedArr&(curCode%) + 1
                    stack%(stackCnt%) = SuffArr%(curCode%)
                    stackCnt% = stackCnt% + 1
                    curCode% = PrefArr%(curCode%)
                LOOP UNTIL curCode% <= 255
            END IF
            finChar% = curCode%
            stack%(stackCnt%) = finChar%
            '--- pop all the codes off the stack and put them to output ---
            FOR i% = stackCnt% TO 0 STEP -1
                pbByte% = stack%(i%): GOSUB PutByte
            NEXT i%
            stackCnt% = 0
            '--- put the new string on the table ---
            IF ignore% THEN
                ignore% = 0
            ELSE
                PrefArr%(nextCode%) = oldCode%
                SuffArr%(nextCode%) = finChar%
                nextCode% = nextCode% + 1
            END IF
            oldCode% = inCode%
    END SELECT
    IF pGui% THEN
        etim# = TIMER(0.001) - stim#
        IF etim# < 0 THEN etim# = etim# + 86400 'midnight fix
        IF etim# >= 0.04 THEN
            res$ = GenC$("SET", lzwProgress$ + NewTag$("LEVEL", LTRIM$(STR$(CINT(100 / LzwLen& * LzwPos&)))))
            UpdateGuiViews: _DISPLAY: stim# = TIMER(0.001)
        END IF
    END IF
LOOP
'--- we should never reach this point, $CHECKING must be switched ---
'--- ON here, so the program is able to recognize the ERROR event ---
$CHECKING:ON
ERROR 97
STOP
$CHECKING:OFF
'--- after that we can proceed with $CHECKING:OFF until function end ---

'---------------
'--- PutByte ---
'---------------
' This subroutine throws one byte to the output. It will also check if
' the target buffer must be expanded.
'----------
' INPUTS:
'   --- pbByte% ---
'    Place the byte to write into pbByte% before the GOSUB call.
'---------------------------------------------------------------------
PutByte:
MID$(TargetBuf$, TargetPos&) = CHR$(pbByte%)
TargetPos& = TargetPos& + 1
IF TargetPos& > TargetLen& THEN
    pbTemp$ = TargetBuf$
    TargetBuf$ = SPACE$(TargetLen& * 1.25)
    TargetLen& = LEN(TargetBuf$)
    MID$(TargetBuf$, 1) = pbTemp$
    pbTemp$ = "" 'important, free temp storage
END IF
RETURN

'---------------
'--- GetCode ---
'---------------
' This subroutine reads one multi-bit code from the input.
'----------
' RESULT:
'   --- gcCode% ---
'    Holds the next valid code.
'---------------------------------------------------------------------
GetCode:
IF gateBits% = 0 THEN
    gcTemp% = ASC(LzwData$, LzwPos&)
    LzwPos& = LzwPos& + 1
    gateBits% = 8
END IF
gate& = gcTemp% \ (2 ^ (8 - gateBits%))
WHILE codeSize% > gateBits%
    gcTemp% = ASC(LzwData$, LzwPos&)
    LzwPos& = LzwPos& + 1
    gate& = gate& OR (gcTemp% * (2 ^ gateBits%))
    gateBits% = gateBits% + 8
WEND
gateBits% = gateBits% - codeSize%
gcCode% = gate& AND ((2 ^ codeSize%) - 1)
RETURN

'--------------------
'--- RebuildTable ---
'--------------------
' This subroutine eliminates any strings which are not used in the Hash
' table. The usual result of doing this is greater compression.
'----------
' RESULT:
'   --- rtNewEnt% ---
'    Returns the new number of entries on Hash table.
'---------------------------------------------------------------------
RebuildTable:
REDIM rtPreArr%(0 TO 4095), rtSufArr%(0 TO 4095), rtUseArr&(0 TO 4095)
REDIM rtPnArr%(0 TO 4095), rtCodArr%(0 TO 4095), rtLocArr%(0 TO 4095)

rtNumEnt% = 0

'--- build a temporary Hash table ---
FOR rtI% = firstCode% TO 4095
    IF UsedArr&(rtI%) > 0 THEN 'code used at all?
        UsedArr&(rtI%) = 0
        rtPre% = PrefArr%(rtI%)
        rtSuf% = SuffArr%(rtI%)
        rtPreArr%(rtNumEnt%) = rtPre% 'put it on temporary table
        rtSufArr%(rtNumEnt%) = rtSuf%
        rtUseArr&(rtNumEnt%) = rtPre% * 4096 + rtSuf%
        rtCodArr%(rtI%) = rtNumEnt%
        rtNumEnt% = rtNumEnt% + 1
    END IF
NEXT rtI%

'--- init help indices ---
rtNumEnt% = rtNumEnt% - 1
FOR rtI% = 0 TO rtNumEnt%
    rtPnArr%(rtI%) = rtI%
NEXT rtI%
'--- sort the table according to it's prefix:suffix ---
rtMid% = rtNumEnt% \ 2
DO
    FOR rtI% = 0 TO rtNumEnt% - rtMid%
        IF rtUseArr&(rtPnArr%(rtI%)) > rtUseArr&(rtPnArr%(rtI% + rtMid%)) THEN
            SWAP rtPnArr%(rtI%), rtPnArr%(rtI% + rtMid%)
            rtCmpLO% = rtI% - rtMid%
            rtCmpHI% = rtI%
            WHILE rtCmpLO% >= 0
                IF rtUseArr&(rtPnArr%(rtCmpLO%)) > rtUseArr&(rtPnArr%(rtCmpHI%)) THEN
                    SWAP rtPnArr%(rtCmpLO%), rtPnArr%(rtCmpHI%)
                    rtCmpHI% = rtCmpLO%
                    rtCmpLO% = rtCmpLO% - rtMid%
                ELSE
                    EXIT WHILE
                END IF
            WEND
        END IF
    NEXT rtI%
    rtMid% = rtMid% \ 2
LOOP WHILE rtMid% > 0
'--- get new locations ---
FOR rtI% = 0 TO rtNumEnt%
    rtLocArr%(rtPnArr%(rtI%)) = rtI%
NEXT

'--- put each prefix:suffix back into the main Hash table ---
FOR rtJ% = 0 TO rtNumEnt%
    rtI% = rtPnArr%(rtJ%)
    '-----
    rtPre% = rtPreArr%(rtI%)
    rtSuf% = rtSufArr%(rtI%)
    IF rtPre% >= firstCode% THEN 'is it pointing twards a string?
        rtPre% = firstCode% + rtLocArr%(rtCodArr%(rtPre%)) 'yup, update the pointer
    END IF
    IF rtSuf% >= firstCode% THEN
        rtSuf% = firstCode% + rtLocArr%(rtCodArr%(rtSuf%))
    END IF
    '-----
    PrefArr%(rtJ% + firstCode%) = rtPre%
    SuffArr%(rtJ% + firstCode%) = rtSuf%
NEXT rtJ%

IF oldCode% >= firstCode% THEN
    oldCode% = firstCode% + rtLocArr%(rtCodArr%(oldCode%))
END IF

rtNewEnt% = rtNumEnt% + 1 'number of entries on the Hash table now

ERASE rtPreArr%, rtSufArr%, rtUseArr&
ERASE rtPnArr%, rtCodArr%, rtLocArr%
RETURN
$CHECKING:ON
END FUNCTION

'--- docs\doc_PackSupport.bm\GetCRC32.html
'---------------------------------------------------------------------
FUNCTION GetCRC32& (MsgData$)
'--- init lookup table ---
REDIM lut~&(0 TO 255)
RESTORE GetCRC32_LookupTable
$CHECKING:OFF
FOR i% = 0 TO 255: READ lut~&(i%): NEXT i%
'--- compute CRC32 ---
crc~& = &HFFFFFFFF
FOR i& = 1 TO LEN(MsgData$)
    crc~& = ((crc~& \ 256) XOR lut~&((crc~& XOR ASC(MsgData$, i&)) AND 255))
NEXT i&
$CHECKING:ON
'--- set result & cleanup ---
GetCRC32& = (crc~& XOR &HFFFFFFFF)
ERASE lut~&
EXIT FUNCTION
'--------------------
GetCRC32_LookupTable:
DATA &H00000000,&H77073096,&HEE0E612C,&H990951BA,&H076DC419,&H706AF48F,&HE963A535,&H9E6495A3
DATA &H0EDB8832,&H79DCB8A4,&HE0D5E91E,&H97D2D988,&H09B64C2B,&H7EB17CBD,&HE7B82D07,&H90BF1D91
DATA &H1DB71064,&H6AB020F2,&HF3B97148,&H84BE41DE,&H1ADAD47D,&H6DDDE4EB,&HF4D4B551,&H83D385C7
DATA &H136C9856,&H646BA8C0,&HFD62F97A,&H8A65C9EC,&H14015C4F,&H63066CD9,&HFA0F3D63,&H8D080DF5
DATA &H3B6E20C8,&H4C69105E,&HD56041E4,&HA2677172,&H3C03E4D1,&H4B04D447,&HD20D85FD,&HA50AB56B
DATA &H35B5A8FA,&H42B2986C,&HDBBBC9D6,&HACBCF940,&H32D86CE3,&H45DF5C75,&HDCD60DCF,&HABD13D59
DATA &H26D930AC,&H51DE003A,&HC8D75180,&HBFD06116,&H21B4F4B5,&H56B3C423,&HCFBA9599,&HB8BDA50F
DATA &H2802B89E,&H5F058808,&HC60CD9B2,&HB10BE924,&H2F6F7C87,&H58684C11,&HC1611DAB,&HB6662D3D
DATA &H76DC4190,&H01DB7106,&H98D220BC,&HEFD5102A,&H71B18589,&H06B6B51F,&H9FBFE4A5,&HE8B8D433
DATA &H7807C9A2,&H0F00F934,&H9609A88E,&HE10E9818,&H7F6A0DBB,&H086D3D2D,&H91646C97,&HE6635C01
DATA &H6B6B51F4,&H1C6C6162,&H856530D8,&HF262004E,&H6C0695ED,&H1B01A57B,&H8208F4C1,&HF50FC457
DATA &H65B0D9C6,&H12B7E950,&H8BBEB8EA,&HFCB9887C,&H62DD1DDF,&H15DA2D49,&H8CD37CF3,&HFBD44C65
DATA &H4DB26158,&H3AB551CE,&HA3BC0074,&HD4BB30E2,&H4ADFA541,&H3DD895D7,&HA4D1C46D,&HD3D6F4FB
DATA &H4369E96A,&H346ED9FC,&HAD678846,&HDA60B8D0,&H44042D73,&H33031DE5,&HAA0A4C5F,&HDD0D7CC9
DATA &H5005713C,&H270241AA,&HBE0B1010,&HC90C2086,&H5768B525,&H206F85B3,&HB966D409,&HCE61E49F
DATA &H5EDEF90E,&H29D9C998,&HB0D09822,&HC7D7A8B4,&H59B33D17,&H2EB40D81,&HB7BD5C3B,&HC0BA6CAD
DATA &HEDB88320,&H9ABFB3B6,&H03B6E20C,&H74B1D29A,&HEAD54739,&H9DD277AF,&H04DB2615,&H73DC1683
DATA &HE3630B12,&H94643B84,&H0D6D6A3E,&H7A6A5AA8,&HE40ECF0B,&H9309FF9D,&H0A00AE27,&H7D079EB1
DATA &HF00F9344,&H8708A3D2,&H1E01F268,&H6906C2FE,&HF762575D,&H806567CB,&H196C3671,&H6E6B06E7
DATA &HFED41B76,&H89D32BE0,&H10DA7A5A,&H67DD4ACC,&HF9B9DF6F,&H8EBEEFF9,&H17B7BE43,&H60B08ED5
DATA &HD6D6A3E8,&HA1D1937E,&H38D8C2C4,&H4FDFF252,&HD1BB67F1,&HA6BC5767,&H3FB506DD,&H48B2364B
DATA &HD80D2BDA,&HAF0A1B4C,&H36034AF6,&H41047A60,&HDF60EFC3,&HA867DF55,&H316E8EEF,&H4669BE79
DATA &HCB61B38C,&HBC66831A,&H256FD2A0,&H5268E236,&HCC0C7795,&HBB0B4703,&H220216B9,&H5505262F
DATA &HC5BA3BBE,&HB2BD0B28,&H2BB45A92,&H5CB36A04,&HC2D7FFA7,&HB5D0CF31,&H2CD99E8B,&H5BDEAE1D
DATA &H9B64C2B0,&HEC63F226,&H756AA39C,&H026D930A,&H9C0906A9,&HEB0E363F,&H72076785,&H05005713
DATA &H95BF4A82,&HE2B87A14,&H7BB12BAE,&H0CB61B38,&H92D28E9B,&HE5D5BE0D,&H7CDCEFB7,&H0BDBDF21
DATA &H86D3D2D4,&HF1D4E242,&H68DDB3F8,&H1FDA836E,&H81BE16CD,&HF6B9265B,&H6FB077E1,&H18B74777
DATA &H88085AE6,&HFF0F6A70,&H66063BCA,&H11010B5C,&H8F659EFF,&HF862AE69,&H616BFFD3,&H166CCF45
DATA &HA00AE278,&HD70DD2EE,&H4E048354,&H3903B3C2,&HA7672661,&HD06016F7,&H4969474D,&H3E6E77DB
DATA &HAED16A4A,&HD9D65ADC,&H40DF0B66,&H37D83BF0,&HA9BCAE53,&HDEBB9EC5,&H47B2CF7F,&H30B5FFE9
DATA &HBDBDF21C,&HCABAC28A,&H53B39330,&H24B4A3A6,&HBAD03605,&HCDD70693,&H54DE5729,&H23D967BF
DATA &HB3667A2E,&HC4614AB8,&H5D681B02,&H2A6F2B94,&HB40BBE37,&HC30C8EA1,&H5A05DF1B,&H2D02EF8D
END FUNCTION


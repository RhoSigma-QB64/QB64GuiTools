'+---------------+---------------------------------------------------+
'| ###### ###### |     .--. .         .-.                            |
'| ##  ## ##   # |     |   )|        (   ) o                         |
'| ##  ##  ##    |     |--' |--. .-.  `-.  .  .-...--.--. .-.        |
'| ######   ##   |     |  \ |  |(   )(   ) | (   ||  |  |(   )       |
'| ##      ##    |     '   `'  `-`-'  `-'-' `-`-`|'  '  `-`-'`-      |
'| ##     ##   # |                            ._.'                   |
'| ##     ###### | Sources & Documents placed under the MIT License. |
'+---------------+---------------------------------------------------+
'|                                                                   |
'| === CycleClass.bm ===                                             |
'|                                                                   |
'| == This is a GUI object class of the GuiTools Framework Project.  |
'|                                                                   |
'+-------------------------------------------------------------------+
'| Done by RhoSigma, R.Heyder, provided AS IS, use at your own risk. |
'| Find me in the QB64 Forum or mail to support@rhosigma-cw.net for  |
'| any questions or suggestions. Thanx for your interest in my work. |
'+-------------------------------------------------------------------+

'=====================================================================
'=== Cycle Class =====================================================
'=====================================================================
'METHODS:
' Each method supports a number of tags to specify the object's properties
' and behavior. These are passed in through the tagString$ argument of the
' class. There may be required and/or optional tags. Find the supported
' tags for each method right below within the method dispatcher
' (the "SELECT CASE methodID$" block):   tagsReq$ = required tags,
'                                        tagsOpt$ = optional tags
'
' For a description of the tags refer to the KnownTags.txt file, for a
' general documentation about the Framework see GuiToolsFramework.pdf.
'---------------------------------------------------------------------
FUNCTION CycleC$ (method$, tagString$)
CycleRes$ = ""
classID$ = "CycleC"
methodID$ = UCASE$(LEFT$(method$, 1)) + LCASE$(MID$(method$, 2))
tagsID$ = tagString$ 'avoid side effects on passed argument
flagsID$ = "d-u"
SELECT CASE methodID$
    CASE "Init"
        tagsReq$ = "LEFT,TOP,WIDTH,HEIGHT,LISTOBJECT,"
        tagsOpt$ = "GUIVIEW,PAGEROBJECT,IMAGEOBJECT,SYMBOLOBJECT," +_
                   "ACTUAL,TEXTMOVEX,TEXTMOVEY," +_
                   "LABEL,LABELHIGH,LABELPLACE,LABELMOVEX,LABELMOVEY," +_
                   "IMAGEFILE,IMAGEHANDLE,AREA," +_
                   "TOOLTIP,SHORTCUT,DISABLED," '+ user tags
        'NOTE: If ACTUAL is not given or outside list bounds, then it
        '      will default to one (1st list entry/record).
        GOSUB meInit
        'Result Tags: ERROR/WARNING or OBJECT
    CASE "Set"
        tagsReq$ = "OBJECT,"
        tagsOpt$ = "IMAGEOBJECT,SYMBOLOBJECT,LISTOBJECT," +_
                   "ACTUAL,TEXTMOVEX,TEXTMOVEY,DISABLED," '+ user tags
        'NOTE: If ACTUAL is not given or outside list bounds, then it
        '      will default to one (1st list entry/record).
        GOSUB meSet
        'Result Tags: ERROR/WARNING or empty
    CASE "Get"
        tagsReq$ = "OBJECT,"
        tagsOpt$ = "TAGNAMES," 'list may include internal + user tags
        'NOTE: The ACTUAL tag holds the index of the actually chosen option
        '      according to the order in the currently assigned multiple
        '      choice option list, and you may also directly query any tags
        '      of the respective list record here (DATA + user tags).
        GOSUB meGet
        'Result Tags: ERROR/WARNING or requested tags (may be empty)
    CASE "Kill"
        tagsReq$ = "OBJECT,"
        tagsOpt$ = ""
        GOSUB meKill
        'Result Tags: ERROR/WARNING or empty
    CASE "Draw"
        tagsReq$ = "OBJECT,"
        tagsOpt$ = ""
        GOSUB meDraw
        'Result Tags: ERROR/WARNING or empty
    CASE "Update"
        tagsReq$ = "OBJECT,MOUSEX,MOUSEY,"
        tagsOpt$ = "" '+ any other MOUSE..., KEY... and/or modifiers tags
        GOSUB meUpdate
        'Result Tags: ERROR/WARNING or SELECTED,RELEASED,SHORTCUT (may be empty)
    CASE ELSE
        SetTag CycleRes$, "ERROR", classID$ + "::" + methodID$ + " -> unknown method"
END SELECT
CycleC$ = CycleRes$
EXIT FUNCTION
'---------------------------------------------------------------------
meInit:
IF NOT ValidateTags%(tagsID$, tagsReq$, 0) THEN
    SetTag CycleRes$, "ERROR", classID$ + "::" + methodID$ + " -> missing required tags"
ELSE
    '--- general init ---
    this& = NewObject&
    InitGeneralProperties this&, classID$, flagsID$, tagsID$
    ApplyPrefs classID$, tagsID$
    '--- check list/pager conditions ---
    IF InitSetAssignedList%(this&, CycleRes$, classID$, methodID$, tagsID$) THEN
        IF InitAssignedPager%(this&, CycleRes$, classID$, tagsID$) THEN
            '--- check for assigned Image/Symbol ---
            InitAssignedImgSym "IMAGEOBJECT", CycleRes$, classID$, tagsID$
            InitAssignedImgSym "SYMBOLOBJECT", CycleRes$, classID$, tagsID$
            '--- background/frame/symbol init ---
            BeginChildInit
            InitObjectBGImg this&, CycleRes$, classID$, tagsID$
            fram$ = FrameC$("INIT", GetTags$(tagsID$, "LEFT,TOP,WIDTH,HEIGHT") + NewTag$("FORM", "simple"))
            guiObjects$(objData%, this&) = guiObjects$(objData%, this&) + ChildTag$("FRM0", fram$)
            heig% = VAL(GetTagData$(tagsID$, "HEIGHT", "0"))
            symb$ = SymbolC$("INIT", NewTag$("WHICH", "Cycle") + NewTag$("LEFT", "7") + NewTag$("TOP", "7") + NewTag$("WIDTH", LTRIM$(STR$(heig% - 14))) + NewTag$("HEIGHT", LTRIM$(STR$(heig% - 14))))
            guiObjects$(objData%, this&) = guiObjects$(objData%, this&) + ChildTag$("SYM0", symb$)
            EndChildInit
            '--- add required/optional tags ---
            opti% = ValidateTags%(tagsID$, tagsOpt$, -1)
            guiObjects$(objData%, this&) = guiObjects$(objData%, this&) + GetTags$(tagsID$, tagsReq$ + tagsOpt$)
            '--- add any remaining user tags ---
            RemTags tagsID$, guiInitTags$ + guiCallTags$ + guiEvntTags$ + guiPrivTags$
            guiObjects$(objData%, this&) = guiObjects$(objData%, this&) + tagsID$
            ObjectsUnselect this&
            '--- set result and schedule gui refresh ---
            SetTag CycleRes$, "OBJECT", LTRIM$(STR$(this&))
            SetTag guiObjects$(0, 0), "GUIREFRESH", "true"
        END IF
    END IF
END IF
RETURN
'---------------------------------------------------------------------
meSet:
IF ValidObject%(this&, thisTag$, CycleRes$, classID$, methodID$, tagsID$) THEN
    '--- check required/optional tag changes ---
    flag% = 0
    IF InitSetAssignedList%(this&, CycleRes$, classID$, methodID$, tagsID$) THEN flag% = -1
    IF SetAssignedImgSym%(this&, "IMAGEOBJECT", CycleRes$, classID$, tagsID$) THEN flag% = -1
    IF SetAssignedImgSym%(this&, "SYMBOLOBJECT", CycleRes$, classID$, tagsID$) THEN flag% = -1
    IF UpdateTags%(guiObjects$(objData%, this&), "TEXTMOVEX,TEXTMOVEY", tagsID$) THEN flag% = -1
    temp$ = GetTagData$(tagsID$, "ACTUAL", "n/a")
    IF temp$ <> "n/a" THEN
        otag$ = GetTagData$(guiObjects$(objData%, this&), "ACTUAL", "n/a")
        IF temp$ <> otag$ THEN
            '--- range check ---
            lobj& = VAL(GetTagData$(guiObjects$(objData%, this&), "LISTOBJECT", "0"))
            reco& = VAL(GetTagData$(guiObjects$(objData%, lobj&), "RECORDS", "0"))
            actu& = VAL(temp$)
            IF actu& < 1 OR actu& > reco& THEN
                temp$ = "1"
                actu& = 1
            END IF
            resu$ = ListC$("SET", NewTag$("OBJECT", LTRIM$(STR$(lobj&))) + NewTag$("REFOBJ", LTRIM$(STR$(this&))) + NewTag$("ACTUAL", LTRIM$(STR$(actu&))))
            SetTag guiObjects$(objData%, this&), "ACTUAL", temp$
            flag% = -1
        END IF
    END IF
    temp$ = GetTagData$(tagsID$, "DISABLED", "n/a")
    IF temp$ <> "n/a" THEN
        IF BoolTagTrue%(tagsID$, "DISABLED") THEN
            RemTags guiObjects$(objData%, this&), "FOCUS,SELECTED"
            SetTag guiObjects$(objData%, this&), "DISABLED", "true"
        ELSE
            RemTag guiObjects$(objData%, this&), "DISABLED"
        END IF
        flag% = -1
    END IF
    '--- check any remaining user tag changes ---
    RemTags tagsID$, guiInitTags$ + guiCallTags$ + guiEvntTags$ + guiPrivTags$
    DO
        utag$ = GetTagName$(tagsID$)
        IF utag$ <> "" THEN
            temp$ = GetTagData$(ExtractTag$(tagsID$, utag$), utag$, "n/a")
            IF temp$ <> "n/a" THEN SetTag guiObjects$(objData%, this&), utag$, temp$
        END IF
    LOOP WHILE utag$ <> ""
    '--- redraw and update object (if required) ---
    IF flag% THEN resu$ = ObjectRefresh$(this&, "du", "")
END IF
RETURN
'---------------------------------------------------------------------
meGet:
IF ValidObject%(this&, thisTag$, CycleRes$, classID$, methodID$, tagsID$) THEN
    '--- get the requested tags ---
    temp$ = GetTagData$(tagsID$, "TAGNAMES", "n/a")
    IF temp$ <> "n/a" THEN
        reco$ = ListC$("READ", ObjectTag$(guiObjects$(objData%, this&), "LISTOBJECT") + NewTag$("REFOBJ", LTRIM$(STR$(this&))) + NewTag$("HOLD", "true") + GetTag$(guiObjects$(objData%, this&), "ACTUAL"))
        IF ValidateTags%(reco$, "ERROR", 0) THEN reco$ = ""
        CycleRes$ = GetTags$(guiObjects$(objData%, this&) + reco$, temp$)
    END IF
END IF
RETURN
'---------------------------------------------------------------------
meKill:
IF ValidObject%(this&, thisTag$, CycleRes$, classID$, methodID$, tagsID$) THEN
    '--- 1st remove interconnections to this object ---
    KillInterconnections this&
    '--- delete child objects ---
    resu$ = SymbolC$("KILL", ObjectTag$(guiObjects$(objData%, this&), "SYM0"))
    resu$ = FrameC$("KILL", ObjectTag$(guiObjects$(objData%, this&), "FRM0"))
    resu$ = ImageC$("KILL", ObjectTag$(guiObjects$(objData%, this&), "BGIMG"))
    resu$ = ImageC$("KILL", ObjectTag$(guiObjects$(objData%, this&), "BBGIMG"))
    '--- check for assigned Symbol/Image ---
    KillAssignedImgSym this&, "SYMBOLOBJECT"
    KillAssignedImgSym this&, "IMAGEOBJECT"
    '--- check pager/list conditions ---
    KillAssignedPager this&
    KillAssignedList this&
    '--- delete object and schedule gui refresh ---
    guiObjects$(objData%, this&) = ""
    guiObjects$(objType%, this&) = ""
    guiObjects$(objFlags%, this&) = ""
    guiObjects$(objConn%, this&) = ""
    SetTag guiObjects$(0, 0), "GUIREFRESH", "true"
END IF
RETURN
'---------------------------------------------------------------------
meDraw:
IF ValidObject%(this&, thisTag$, CycleRes$, classID$, methodID$, tagsID$) THEN
    '--- select drawing colors ---
    IF BoolTagTrue%(guiObjects$(objData%, this&), "FOCUS") AND BoolTagTrue%(guiObjects$(objData%, this&), "SELECTED") THEN
        back% = guiFillPen%: text% = guiFillTextPen% 'text pens
        focu% = guiFillTextPen%: disa% = guiFillPen% 'state pens
        rebo$ = "true" 'recess border frame?
    ELSE
        back% = guiBackPen%: text% = guiTextPen% 'text pens
        focu% = guiHighPen%: disa% = guiFillPen% 'state pens
        rebo$ = "false" 'recess border frame?
    END IF
    '--- get object's dimensions ---
    left% = VAL(GetTagData$(guiObjects$(objData%, this&), "LEFT", "0"))
    topp% = VAL(GetTagData$(guiObjects$(objData%, this&), "TOP", "0"))
    widt% = VAL(GetTagData$(guiObjects$(objData%, this&), "WIDTH", "0"))
    heig% = VAL(GetTagData$(guiObjects$(objData%, this&), "HEIGHT", "0"))
    lobj& = VAL(GetTagData$(guiObjects$(objData%, this&), "LISTOBJECT", "0"))
    sobj& = VAL(GetTagData$(guiObjects$(objData%, this&), "SYM0", "0"))
    swid% = VAL(GetTagData$(guiObjects$(objData%, sobj&), "WIDTH", "0"))
    '--- draw object ----
    FillRectColor left%, topp%, widt%, heig%, back%
    resu$ = ImageC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "BGIMG"))
    '--- image/symbol/frame object ---
    IF BoolTagTrue%(guiObjects$(objData%, this&), "FOCUS") THEN
        LINE (left% + 4, topp% + 4)-(left% + widt% - 5, topp% + heig% - 5), focu%, B
        BrightenObjectBG this&, left%, topp%, widt%, heig%
        LINE (left% + 4, topp% + 4)-(left% + widt% - 5, topp% + heig% - 5), focu%, B
    END IF
    resu$ = ImageC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "IMAGEOBJECT") + GetTags$(guiObjects$(objData%, this&), "LEFT,TOP"))
    resu$ = SymbolC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "SYMBOLOBJECT") + GetTags$(guiObjects$(objData%, this&), "LEFT,TOP"))
    resu$ = SymbolC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "SYM0") + GetTags$(guiObjects$(objData%, this&), "LEFT,TOP"))
    LINE (left% + swid% + 10, topp% + 6)-(left% + swid% + 10, topp% + heig% - 7), guiShadowPen%
    LINE (left% + swid% + 11, topp% + 6)-(left% + swid% + 11, topp% + heig% - 7), guiShinePen%
    resu$ = FrameC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "FRM0") + NewTag$("RECESSED", rebo$))
    '--- text label ---
    reco$ = ListC$("READ", NewTag$("OBJECT", LTRIM$(STR$(lobj&))) + NewTag$("REFOBJ", LTRIM$(STR$(this&))) + NewTag$("HOLD", "true") + GetTag$(guiObjects$(objData%, this&), "ACTUAL"))
    text$ = GetTagData$(reco$, "DATA", "n/a")
    IF text$ <> "n/a" THEN
        text$ = LTRIM$(RTRIM$(text$))
        xmov% = VAL(GetTagData$(guiObjects$(objData%, this&), "TEXTMOVEX", "0"))
        ymov% = VAL(GetTagData$(guiObjects$(objData%, this&), "TEXTMOVEY", "0"))
        txto% = (topp% + INT(heig% / 2)) - INT(_FONTHEIGHT / 2)
        txle% = (left% + INT((widt% - swid% - 17) / 2)) - INT(_PRINTWIDTH(text$) / 2) + swid% + 13
        prim% = _PRINTMODE
        SetPrintMode pmKEEP%
        COLOR text%
        _PRINTSTRING (txle% + 1 + xmov%, txto% + 1 + ymov%), text$
        SetPrintMode prim%
    END IF
    '--- label output ---
    PrintObjectLabel this&, left%, topp%, widt%, heig%
    '--- check on/off state ---
    IF BoolTagTrue%(guiObjects$(objData%, this&), "DISABLED") THEN
        FillRectRaster left%, topp%, widt%, heig%, disa%
    END IF
END IF
RETURN
'---------------------------------------------------------------------
meUpdate:
IF ValidObject%(this&, thisTag$, CycleRes$, classID$, methodID$, tagsID$) THEN
    '--- don't update, if currently disabled ---
    IF BoolTagTrue%(guiObjects$(objData%, this&), "DISABLED") THEN RETURN
    '--- save old drawing relevant states ---
    osta$ = GetTags$(guiObjects$(objData%, this&), "FOCUS,SELECTED")
    '--- check for shortcut trigger ---
    actu& = VAL(GetTagData$(guiObjects$(objData%, this&), "ACTUAL", "1"))
    lobj& = VAL(GetTagData$(guiObjects$(objData%, this&), "LISTOBJECT", "0"))
    reco& = VAL(GetTagData$(guiObjects$(objData%, lobj&), "RECORDS", "0"))
    shor$ = GetTagData$(guiObjects$(objData%, this&), "SHORTCUT", "n/a")
    IF NOT BoolTagTrue%(osta$, "SELECTED") AND shor$ <> "n/a" AND guiASCObject& = 0 THEN
        IF BoolTagTrue%(tagsID$, "KEYPRESS") THEN
            IF ObjectShortcut%(shor$, tagsID$) THEN
                SetTag guiObjects$(objData%, this&), "FOCUS", "true"
                SetTag guiObjects$(objData%, this&), "SELECTED", "true"
                resu$ = CycleC$("DRAW", thisTag$)
                IF NOT BoolTagTrue%(guiObjects$(0, 0), "EGRFLAG") THEN UpdateGuiViews: _DISPLAY
                _DELAY 0.125
                IF NOT BoolTagTrue%(osta$, "FOCUS") THEN RemTag guiObjects$(objData%, this&), "FOCUS"
                RemTag guiObjects$(objData%, this&), "SELECTED"
                ObjectsUnselect this&
                actu& = actu& + 1: IF actu& > reco& THEN actu& = 1
                SetTag guiObjects$(objData%, this&), "ACTUAL", LTRIM$(STR$(actu&))
                resu$ = CycleC$("DRAW", thisTag$)
                SetTag CycleRes$, "RELEASED", LTRIM$(STR$(this&))
                SetTag CycleRes$, "SHORTCUT", "true"
                RETURN
            END IF
        END IF
    END IF
    '--- get mouse position and object dimensions ---
    moux% = VAL(GetTagData$(tagsID$, "MOUSEX", "-1"))
    mouy% = VAL(GetTagData$(tagsID$, "MOUSEY", "-1"))
    scrv% = VAL(GetTagData$(tagsID$, "SCRVAL", "0"))
    left% = VAL(GetTagData$(guiObjects$(objData%, this&), "LEFT", "0"))
    topp% = VAL(GetTagData$(guiObjects$(objData%, this&), "TOP", "0"))
    widt% = VAL(GetTagData$(guiObjects$(objData%, this&), "WIDTH", "0"))
    heig% = VAL(GetTagData$(guiObjects$(objData%, this&), "HEIGHT", "0"))
    '--- check for mouse trigger ---
    IF moux% >= left% AND moux% < (left% + widt%) AND mouy% >= topp% AND mouy% < (topp% + heig%) THEN
        SetTag guiObjects$(objData%, this&), "FOCUS", "true"
        IF BoolTagTrue%(tagsID$, "MOUSELBDOWN") THEN
            SetTag guiObjects$(objData%, this&), "SELECTED", "true"
            SetTag CycleRes$, "SELECTED", LTRIM$(STR$(this&))
        ELSEIF BoolTagTrue%(guiObjects$(objData%, this&), "SELECTED") AND BoolTagTrue%(tagsID$, "MOUSELBUP") THEN
            RemTag guiObjects$(objData%, this&), "SELECTED"
            actu& = actu& + 1: IF actu& > reco& THEN actu& = 1
            SetTag guiObjects$(objData%, this&), "ACTUAL", LTRIM$(STR$(actu&))
            SetTag CycleRes$, "RELEASED", LTRIM$(STR$(this&))
        ELSEIF BoolTagTrue%(tagsID$, "KEYPRESS") AND guiASCObject& = 0 THEN
            RemTags tagsID$, "ALT,SHIFT": SetTag tagsID$, "CTRL", "true"
            IF GetTagData$(tagsID$, "KEY", "n/a") = CHR$(0) + "P" THEN
                scrv% = 1: GOSUB meMousescroll
            ELSEIF GetTagData$(tagsID$, "KEY", "n/a") = CHR$(0) + "H" THEN
                scrv% = -1: GOSUB meMousescroll
            ELSEIF GetTagData$(tagsID$, "KEY", "n/a") = CHR$(0) + "M" THEN
                scrv% = 1: GOSUB meMousescroll
            ELSEIF GetTagData$(tagsID$, "KEY", "n/a") = CHR$(0) + "K" THEN
                scrv% = -1: GOSUB meMousescroll
            END IF
        ELSEIF BoolTagTrue%(tagsID$, "MOUSESCROLL") THEN
            GOSUB meMousescroll
        END IF
    ELSE
        RemTag guiObjects$(objData%, this&), "FOCUS"
        IF BoolTagTrue%(tagsID$, "MOUSELBUP") THEN
            RemTag guiObjects$(objData%, this&), "SELECTED"
        ELSEIF BoolTagTrue%(tagsID$, "KEYPRESS") AND guiASCObject& = 0 AND BoolTagTrue%(tagsID$, "FOCUS") THEN
            RemTags tagsID$, "ALT,SHIFT": SetTag tagsID$, "CTRL", "true"
            IF GetTagData$(tagsID$, "KEY", "n/a") = CHR$(0) + "P" THEN
                scrv% = 1: GOSUB meMousescroll
            ELSEIF GetTagData$(tagsID$, "KEY", "n/a") = CHR$(0) + "H" THEN
                scrv% = -1: GOSUB meMousescroll
            ELSEIF GetTagData$(tagsID$, "KEY", "n/a") = CHR$(0) + "M" THEN
                scrv% = 1: GOSUB meMousescroll
            ELSEIF GetTagData$(tagsID$, "KEY", "n/a") = CHR$(0) + "K" THEN
                scrv% = -1: GOSUB meMousescroll
            END IF
        ELSEIF BoolTagTrue%(tagsID$, "MOUSESCROLL") AND BoolTagTrue%(tagsID$, "FOCUS") THEN
            GOSUB meMousescroll
        END IF
    END IF
    '--- redraw object, if state has changed ---
    nsta$ = GetTags$(guiObjects$(objData%, this&), "FOCUS,SELECTED")
    IF nsta$ <> osta$ THEN
        resu$ = CycleC$("DRAW", thisTag$)
    END IF
END IF
RETURN
'----------------------------------
meMousescroll:
IF NOT BoolTagTrue%(tagsID$, "ALT") AND NOT BoolTagTrue%(tagsID$, "SHIFT") THEN
    IF BoolTagTrue%(tagsID$, "CTRL") THEN
        RemTag guiObjects$(objData%, this&), "SELECTED"
        actu& = actu& + scrv%
        IF actu& < 1 THEN actu& = reco&: ELSE IF actu& > reco& THEN actu& = 1
        SetTag guiObjects$(objData%, this&), "ACTUAL", LTRIM$(STR$(actu&))
        resu$ = CycleC$("DRAW", thisTag$)
        SetTag CycleRes$, "RELEASED", LTRIM$(STR$(this&))
        SetTag CycleRes$, "SHORTCUT", "true"
        SetTag CycleRes$, "MOUSESCROLL", "true"
    END IF
END IF
RETURN
END FUNCTION
'=====================================================================
'=====================================================================


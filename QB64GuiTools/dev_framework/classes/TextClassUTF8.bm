'+---------------+---------------------------------------------------+
'| ###### ###### |     .--. .         .-.                            |
'| ##  ## ##   # |     |   )|        (   ) o                         |
'| ##  ##  ##    |     |--' |--. .-.  `-.  .  .-...--.--. .-.        |
'| ######   ##   |     |  \ |  |(   )(   ) | (   ||  |  |(   )       |
'| ##      ##    |     '   `'  `-`-'  `-'-' `-`-`|'  '  `-`-'`-      |
'| ##     ##   # |                            ._.'                   |
'| ##     ###### | Sources & Documents placed under the MIT License. |
'+---------------+---------------------------------------------------+
'|                                                                   |
'| === TextClassUTF8.bm ===                                          |
'|                                                                   |
'| == This is a GUI object class of the GuiTools Framework Project.  |
'|                                                                   |
'| == The only difference to the normal TextClass.bm is, that all    |
'| == _PRINTWIDTH/_PRINTSTRING/_FONTHEIGHT occurrences were replaced |
'| == with their respective _U... versions.                          |
'|                                                                   |
'+-------------------------------------------------------------------+
'| Done by RhoSigma, R.Heyder, provided AS IS, use at your own risk. |
'| Find me in the QB64 Forum or mail to support@rhosigma-cw.net for  |
'| any questions or suggestions. Thanx for your interest in my work. |
'+-------------------------------------------------------------------+

$IF VERSION < 3.8.0 THEN
    $ERROR 'This class requires at least QB64-PE v3.8.0 to compile.'
$END IF

'=====================================================================
'=== Text Class ======================================================
'=====================================================================
'FUNCTION:
'   Class does provide single line text output objects. The output area
'   may also be framed and the printed text can be left/right justified
'   or centered within the area. Vertically it will always be centered
'   in the area.
'
'METHODS:
' Each method supports a number of tags to specify the object's properties
' and behavior. These are passed in through the tagString$ argument of the
' class. There may be required and/or optional tags. Find the supported
' tags for each method right below within the method dispatcher
' (the "SELECT CASE methodID$" block):   tagsReq$ = required tags,
'                                        tagsOpt$ = optional tags
'
' For a description of the tags refer to the KnownTags.txt file, for a
' general documentation about the Framework see GuiToolsFramework.pdf.
'---------------------------------------------------------------------
FUNCTION TextC$ (method$, tagString$)
TextRes$ = ""
classID$ = "TextC"
methodID$ = UCASE$(LEFT$(method$, 1)) + LCASE$(MID$(method$, 2))
tagsID$ = tagString$ 'avoid side effects on passed argument
flagsID$ = "d-u"
SELECT CASE methodID$
    CASE "Init"
        tagsReq$ = "LEFT,TOP,WIDTH,HEIGHT,"
        tagsOpt$ = "GUIVIEW,PAGEROBJECT,IMAGEOBJECT,SYMBOLOBJECT,FORM," +_
                   "TEXT,TEXTPLACE,TEXTMOVEX,TEXTMOVEY,TEXTSCROLL," +_
                   "LABEL,LABELHIGH,LABELPLACE,LABELMOVEX,LABELMOVEY," +_
                   "IMAGEFILE,IMAGEHANDLE,AREA,TOOLTIP," '+ user tags
        'NOTE: If FORM is omitted (frameless object) then any given back
        '      image (IMAGEHANDLE/IMAGEFILE) is ignored and the text will
        '      print over the existing display content using _KEEPBACKGROUND
        '      print mode, good to place independent texts anywhere.
        GOSUB meInit
        'Result Tags: ERROR/WARNING or OBJECT
    CASE "Set"
        tagsReq$ = "OBJECT,"
        tagsOpt$ = "IMAGEOBJECT,SYMBOLOBJECT," +_
                   "TEXT,TEXTPLACE,TEXTMOVEX,TEXTMOVEY,TEXTSCROLL," '+ user tags
        GOSUB meSet
        'Result Tags: ERROR/WARNING or empty
    CASE "Get"
        tagsReq$ = "OBJECT,"
        tagsOpt$ = "TAGNAMES," 'list may include internal + user tags
        GOSUB meGet
        'Result Tags: ERROR/WARNING or requested tags (may be empty)
    CASE "Kill"
        tagsReq$ = "OBJECT,"
        tagsOpt$ = ""
        GOSUB meKill
        'Result Tags: ERROR/WARNING or empty
    CASE "Draw"
        tagsReq$ = "OBJECT,"
        tagsOpt$ = "SELECTED," 'properties of parent object
        GOSUB meDraw
        'Result Tags: ERROR/WARNING or empty
    CASE "Update"
        tagsReq$ = "OBJECT,MOUSEX,MOUSEY,"
        tagsOpt$ = "" '+ any other MOUSE..., KEY... and/or modifiers tags
        GOSUB meUpdate
        'Result Tags: ERROR/WARNING or empty
    CASE ELSE
        SetTag TextRes$, "ERROR", classID$ + "::" + methodID$ + " -> unknown method"
END SELECT
TextC$ = TextRes$
EXIT FUNCTION
'---------------------------------------------------------------------
meInit:
IF NOT ValidateTags%(tagsID$, tagsReq$, 0) THEN
    SetTag TextRes$, "ERROR", classID$ + "::" + methodID$ + " -> missing required tags"
ELSE
    '--- general init ---
    this& = NewObject&
    InitGeneralProperties this&, classID$, flagsID$, tagsID$
    ApplyPrefs classID$, tagsID$
    '--- check pager conditions ---
    IF InitAssignedPager%(this&, TextRes$, classID$, tagsID$) THEN
        '--- check for assigned Image/Symbol ---
        InitAssignedImgSym "IMAGEOBJECT", TextRes$, classID$, tagsID$
        InitAssignedImgSym "SYMBOLOBJECT", TextRes$, classID$, tagsID$
        '--- background/frame init (if any) ---
        BeginChildInit
        IF ValidateTags%(tagsID$, "FORM", -1) THEN
            InitObjectBGImg this&, TextRes$, classID$, tagsID$
            fram$ = FrameC$("INIT", GetTags$(tagsID$, "LEFT,TOP,WIDTH,HEIGHT,FORM") + NewTag$("RECESSED", "true"))
            guiObjects$(objData%, this&) = guiObjects$(objData%, this&) + ChildTag$("FRM0", fram$)
        ELSE
            RemTags tagsID$, "IMAGEHANDLE,IMAGEFILE,AREA"
        END IF
        EndChildInit
        '--- add required/optional tags ---
        opti% = ValidateTags%(tagsID$, tagsOpt$, -1)
        guiObjects$(objData%, this&) = guiObjects$(objData%, this&) + GetTags$(tagsID$, tagsReq$ + tagsOpt$)
        '--- add any remaining user tags ---
        RemTags tagsID$, guiInitTags$ + guiCallTags$ + guiEvntTags$ + guiPrivTags$
        guiObjects$(objData%, this&) = guiObjects$(objData%, this&) + tagsID$
        '--- set result and schedule gui refresh ---
        SetTag TextRes$, "OBJECT", LTRIM$(STR$(this&))
        SetTag guiObjects$(0, 0), "GUIREFRESH", "true"
    END IF
END IF
RETURN
'---------------------------------------------------------------------
meSet:
IF ValidObject%(this&, thisTag$, TextRes$, classID$, methodID$, tagsID$) THEN
    '--- check required/optional tag changes ---
    flag% = 0
    IF SetAssignedImgSym%(this&, "IMAGEOBJECT", TextRes$, classID$, tagsID$) THEN flag% = -1
    IF SetAssignedImgSym%(this&, "SYMBOLOBJECT", TextRes$, classID$, tagsID$) THEN flag% = -1
    IF UpdateTags%(guiObjects$(objData%, this&), "TEXT,TEXTPLACE,TEXTMOVEX,TEXTMOVEY,TEXTSCROLL", tagsID$) THEN flag% = -1
    text$ = GetTag$(tagsID$, "TEXT"): temp$ = GetTagData$(text$, "TEXT", "n/a")
    IF text$ <> "" AND temp$ = "n/a" THEN RemTag guiObjects$(objData%, this&), "TEXT": flag% = -1
    '--- check any remaining user tag changes ---
    RemTags tagsID$, guiInitTags$ + guiCallTags$ + guiEvntTags$ + guiPrivTags$
    DO
        utag$ = GetTagName$(tagsID$)
        IF utag$ <> "" THEN
            temp$ = GetTagData$(ExtractTag$(tagsID$, utag$), utag$, "n/a")
            IF temp$ <> "n/a" THEN SetTag guiObjects$(objData%, this&), utag$, temp$
        END IF
    LOOP WHILE utag$ <> ""
    '--- redraw object (if required) ---
    IF flag% THEN
        '--- first invalidate scroll text data ---
        txim& = VAL(GetTagData$(guiObjects$(objData%, this&), "SCIMG", "-1"))
        IF txim& < -1 THEN _FREEIMAGE txim&
        RemTags guiObjects$(objData%, this&), "SCIMG,EVAL,ETIM"
        '--- then redraw ---
        IF ValidateTags%(guiObjects$(objData%, this&), "FRM0", 0) THEN
            resu$ = ObjectRefresh$(this&, "d", "")
        ELSE
            SetTag guiObjects$(0, 0), "GUIREFRESH", "true"
        END IF
    END IF
END IF
RETURN
'---------------------------------------------------------------------
meGet:
IF ValidObject%(this&, thisTag$, TextRes$, classID$, methodID$, tagsID$) THEN
    '--- get the requested tags ---
    temp$ = GetTagData$(tagsID$, "TAGNAMES", "n/a")
    IF temp$ <> "n/a" THEN
        TextRes$ = GetTags$(guiObjects$(objData%, this&), temp$)
    ELSE
        TextRes$ = GetTags$(guiObjects$(objData%, this&), guiInitTags$)
    END IF
END IF
RETURN
'---------------------------------------------------------------------
meKill:
IF ValidObject%(this&, thisTag$, TextRes$, classID$, methodID$, tagsID$) THEN
    '--- 1st remove interconnections to this object ---
    KillInterconnections this&
    '--- free scroll text image (if any) ---
    txim& = VAL(GetTagData$(guiObjects$(objData%, this&), "SCIMG", "-1"))
    IF txim& < -1 THEN _FREEIMAGE txim&
    '--- delete child objects ---
    resu$ = FrameC$("KILL", ObjectTag$(guiObjects$(objData%, this&), "FRM0"))
    resu$ = ImageC$("KILL", ObjectTag$(guiObjects$(objData%, this&), "BGIMG"))
    '--- check for assigned Symbol/Image ---
    KillAssignedImgSym this&, "SYMBOLOBJECT"
    KillAssignedImgSym this&, "IMAGEOBJECT"
    '--- check pager conditions ---
    KillAssignedPager this&
    '--- delete object and schedule gui refresh ---
    guiObjects$(objData%, this&) = ""
    guiObjects$(objType%, this&) = ""
    guiObjects$(objFlags%, this&) = ""
    guiObjects$(objConn%, this&) = ""
    SetTag guiObjects$(0, 0), "GUIREFRESH", "true"
END IF
RETURN
'---------------------------------------------------------------------
meDraw:
IF ValidObject%(this&, thisTag$, TextRes$, classID$, methodID$, tagsID$) THEN
    '--- select drawing colors ---
    back% = guiBackPen%: text% = guiTextPen% 'text pens
    IF BoolTagTrue%(tagsID$, "SELECTED") THEN
        back% = guiFillPen%: text% = guiFillTextPen%
    END IF
    '--- get object's dimensions ---
    left% = VAL(GetTagData$(guiObjects$(objData%, this&), "LEFT", "0"))
    topp% = VAL(GetTagData$(guiObjects$(objData%, this&), "TOP", "0"))
    widt% = VAL(GetTagData$(guiObjects$(objData%, this&), "WIDTH", "0"))
    heig% = VAL(GetTagData$(guiObjects$(objData%, this&), "HEIGHT", "0"))
    '--- draw object ----
    IF NOT BoolTagTrue%(guiObjects$(objData%, this&), "LVFLAG") THEN
        IF ValidateTags%(guiObjects$(objData%, this&), "FRM0", 0) THEN
            FillRectColor left%, topp%, widt%, heig%, back%
            resu$ = ImageC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "BGIMG"))
        END IF
    ELSEIF BoolTagTrue%(tagsID$, "SELECTED") THEN
        FillRectColor left%, topp%, widt%, heig%, back%
    END IF
    '--- label output ---
    PrintObjectLabel this&, left%, topp%, widt%, heig%
    '--- image/symbol/frame object ---
    resu$ = ImageC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "IMAGEOBJECT") + GetTags$(guiObjects$(objData%, this&), "LEFT,TOP"))
    resu$ = SymbolC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "SYMBOLOBJECT") + GetTags$(guiObjects$(objData%, this&), "LEFT,TOP"))
    resu$ = FrameC$("DRAW", ObjectTag$(guiObjects$(objData%, this&), "FRM0"))
    '--- text output ---
    text$ = GetTagData$(guiObjects$(objData%, this&), "TEXT", "n/a")
    IF text$ <> "n/a" THEN
        text$ = LTRIM$(RTRIM$(text$))
        form$ = LCASE$(GetTagData$(guiObjects$(objData%, this&), "FORM", ""))
        plac$ = LCASE$(GetTagData$(guiObjects$(objData%, this&), "TEXTPLACE", "left"))
        xmov% = VAL(GetTagData$(guiObjects$(objData%, this&), "TEXTMOVEX", "0"))
        ymov% = VAL(GetTagData$(guiObjects$(objData%, this&), "TEXTMOVEY", "0"))
        txto% = (topp% + INT(heig% / 2)) - INT(_UFONTHEIGHT / 2)
        disp% = 0
        SELECT CASE form$
            CASE "simple"
                disp% = 2 + 2 'frame thickness + 2px inner spacing
            CASE "ridge"
                disp% = 4 + 2
            CASE "solid"
                disp% = 6 + 2
        END SELECT
        IF _UPRINTWIDTH(text$, 8) = 0 THEN
            ouc% = _MAPUNICODE(255)
            nuc% = 160: IF _FONT = 16 THEN nuc% = 255
            _MAPUNICODE nuc% TO 255
            text$ = AnsiTextToUtf8Text$(text$, "")
            _MAPUNICODE ouc% TO 255
        END IF
        IF _UPRINTWIDTH(text$, 8) > (widt% - (2 * disp%)) THEN
            IF NOT BoolTagTrue%(guiObjects$(objData%, this&), "TEXTSCROLL") THEN
                WHILE _UPRINTWIDTH(text$ + "...", 8) > (widt% - (2 * disp%))
                    tl% = LEN(text$): c~%% = ASC(text$, tl%): cut% = 1
                    IF c~%% > 127 THEN
                        DO: c~%% = ASC(text$, tl% - cut%): cut% = cut% + 1
                        LOOP UNTIL ((tl% - cut%) = 0) OR ((c~%% AND &HC0~%%) = 192)
                    END IF
                    text$ = LEFT$(text$, LEN(text$) - cut%)
                WEND
                text$ = text$ + "..."
            ELSE
                txim& = VAL(GetTagData$(guiObjects$(objData%, this&), "SCIMG", "-1"))
                sctx$ = text$ + " - - - - - ": scle% = _UPRINTWIDTH(sctx$, 8)
                IF txim& >= -1 THEN
                    sctx$ = sctx$ + text$
                    txim& = _NEWIMAGE(_UPRINTWIDTH(sctx$, 8) + 10, heig%, 256)
                    ofon& = _FONT: odes& = _DEST: _DEST txim&: _FONT ofon&
                    _PRINTMODE _KEEPBACKGROUND: COLOR text%: _CLEARCOLOR 0
                    _UPRINTSTRING (0, txto% - topp% + ymov%), sctx$, , 8
                    _FONT 16: _DEST odes&
                    SetTag guiObjects$(objData%, this&), "SCIMG", LTRIM$(STR$(txim&))
                END IF
                ssta% = VAL(GetTagData$(guiObjects$(objData%, this&), "EVAL", "0"))
                _PUTIMAGE (left% + disp%, topp% + disp% - 2), txim&, _DEST, (ssta%, disp% - 2)-(ssta% + widt% - (2 * disp%) - 1, heig% - (2 * (disp% - 2)) - 1)
                ssta% = ssta% + 1: IF ssta% = scle% THEN ssta% = 0
                SetTag guiObjects$(objData%, this&), "EVAL", LTRIM$(STR$(ssta%))
                SetTag guiObjects$(objData%, this&), "ETIM", LTRIM$(STR$(TIMER(0.001)))
                SetTag guiObjects$(0, 0), "IMMFLAG", "true"
                RETURN
            END IF
        END IF
        SELECT CASE plac$
            CASE "left"
                txle% = left% + disp%
            CASE "center"
                txle% = (left% + INT(widt% / 2)) - INT(_UPRINTWIDTH(text$, 8) / 2)
            CASE "right"
                txle% = (left% + widt% - 1) - _UPRINTWIDTH(text$, 8) - disp%
        END SELECT
        prim% = _PRINTMODE
        SetPrintMode pmKEEP%
        COLOR text%
        _UPRINTSTRING (txle% + 1 + xmov%, txto% + ymov%), text$, , 8
        SetPrintMode prim%
    END IF
END IF
RETURN
'---------------------------------------------------------------------
meUpdate:
IF ValidObject%(this&, thisTag$, TextRes$, classID$, methodID$, tagsID$) THEN
    '--- get mouse position and object dimensions ---
    moux% = VAL(GetTagData$(tagsID$, "MOUSEX", "-1"))
    mouy% = VAL(GetTagData$(tagsID$, "MOUSEY", "-1"))
    left% = VAL(GetTagData$(guiObjects$(objData%, this&), "LEFT", "0"))
    topp% = VAL(GetTagData$(guiObjects$(objData%, this&), "TOP", "0"))
    widt% = VAL(GetTagData$(guiObjects$(objData%, this&), "WIDTH", "0"))
    heig% = VAL(GetTagData$(guiObjects$(objData%, this&), "HEIGHT", "0"))
    '--- check for mouse focus ---
    IF moux% >= left% AND moux% < (left% + widt%) AND mouy% >= topp% AND mouy% < (topp% + heig%) THEN
        SetTag guiObjects$(objData%, this&), "FOCUS", "true"
    ELSE
        RemTag guiObjects$(objData%, this&), "FOCUS"
    END IF
    '--- check scroll timer ---
    etim# = VAL(GetTagData$(guiObjects$(objData%, this&), "ETIM", "-1"))
    IF etim# >= 0 THEN
        etim# = TIMER(0.001) - etim#
        IF etim# < 0 THEN etim# = etim# + 86400 'midnight fix
        IF etim# >= 0.04 THEN
            IF guiATTProps$ <> "" THEN 'look for tooltip/textfield collision, remove tooltip if required
                ovix& = VAL(GetTagData$(guiObjects$(objData%, this&), "GUIVIEW", "0"))
                tvix& = VAL(GetTagData$(guiATTProps$, "GUIVIEW", "0"))
                IF ovix& = tvix& THEN 'no collision possible, if on different GuiViews
                    bubb& = VAL(GetTagData$(guiATTProps$, "IHANDLE", "-1"))
                    bux1% = VAL(GetTagData$(guiATTProps$, "LEFT", "0")): bux2% = bux1% + _WIDTH(bubb&) - 1
                    buy1% = VAL(GetTagData$(guiATTProps$, "TOP", "0")): buy2% = buy1% + _HEIGHT(bubb&) - 1
                    IF left% + widt% - 1 >= bux1% THEN
                        IF left% <= bux2% THEN
                            IF topp% + heig% - 1 >= buy1% THEN
                                IF topp% <= buy2% THEN
                                    obje& = VAL(GetTagData$(guiATTProps$, "OBJECT", "0"))
                                    UPrintObjectTooltipTX 0
                                END IF
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            resu$ = TextC$("DRAW", thisTag$)
            IF obje& > 0 THEN UPrintObjectTooltipTX obje& 'redraw tooltip if there was one
        END IF
        SetTag TextRes$, "IMMFLAG", "true"
    END IF
END IF
RETURN
END FUNCTION
'=====================================================================
'=====================================================================

'--- INTERNAL --------------------------------------------------------
' This SUB will print the help/tooltip (if any) of the given object or
' will remove the currently displayed tooltip on the next call. This is
' a UTF-8 variant explicitly used by the UTF-8 Text class only.
'---------------------------------------------------------------------
' Inputs: this& = the object, which its help/tooltip shall be printed
'---------------------------------------------------------------------
SUB UPrintObjectTooltipTX (this&)
IF guiATTProps$ <> "" THEN
    '--- redraw or remove currently shown tooltip ---
    SourceDestGuiView VAL(GetTagData$(guiATTProps$, "GUIVIEW", "0"))
    left% = VAL(GetTagData$(guiATTProps$, "LEFT", "0"))
    topp% = VAL(GetTagData$(guiATTProps$, "TOP", "0"))
    bubb& = VAL(GetTagData$(guiATTProps$, "IHANDLE", "-1"))
    area& = VAL(GetTagData$(guiATTProps$, "RHANDLE", "-1"))
    IF this& THEN
        _PUTIMAGE (left%, topp%), bubb&, _DEST
    ELSE
        _PUTIMAGE (left%, topp%), area&, _DEST
        _FREEIMAGE area&
        _FREEIMAGE bubb&
        guiATTProps$ = ""
    END IF
ELSE
    IF this& <= 0 THEN EXIT SUB
    '--- set view ---
    SourceDestGuiView VAL(GetTagData$(guiObjects$(objData%, this&), "GUIVIEW", "0"))
    '--- only do, if tooltip or shortcut is available ---
    text$ = LTRIM$(RTRIM$(GetTagData$(guiObjects$(objData%, this&), "TOOLTIP", "")))
    shor$ = GetTagData$(guiObjects$(objData%, this&), "SHORTCUT", "")
    IF text$ <> "" OR shor$ <> "" THEN
        '--- assemble the text ---
        IF text$ <> "" THEN
            IF RIGHT$(text$, 1) <> "|" THEN text$ = text$ + "|"
        END IF
        IF shor$ <> "" THEN
            IF text$ <> "" THEN text$ = text$ + "----------|"
            key$ = MKI$(VAL(shor$))
            IF RIGHT$(key$, 1) = CHR$(0) AND ASC(LEFT$(key$, 1)) > 32 THEN
                key$ = LEFT$(key$, 1)
            ELSE
                RESTORE MakeShortcut_FKeys
                FOR i% = 1 TO 25
                    READ fu$, id&
                    IF VAL(shor$) = id& THEN key$ = fu$: EXIT FOR
                NEXT i%
            END IF
            IF LEN(key$) = 1 AND key$ >= "A" AND key$ <= "Z" THEN key$ = key$ + " (SHIFT " + CHR$(ASC(key$) + 32) + ")"
            IF INSTR(shor$, "A") THEN key$ = "ALT " + key$
            IF INSTR(shor$, "C") THEN key$ = "CTRL " + key$
            IF INSTR(shor$, "S") THEN key$ = "SHIFT " + key$
            text$ = text$ + "Shortcut: " + key$ + "|"
        END IF
        '--- make sure it's valid Utf-8 ---
        IF _UPRINTWIDTH(text$, 8) = 0 THEN
            ouc% = _MAPUNICODE(255)
            nuc% = 160: IF _FONT = 16 THEN nuc% = 255
            _MAPUNICODE nuc% TO 255
            text$ = AnsiTextToUtf8Text$(text$, "")
            _MAPUNICODE ouc% TO 255
        END IF
        '--- calculate required bounding box for print ---
        sp% = 1: nl% = 0: pw% = 0
        FOR i% = 1 TO LEN(text$)
            IF MID$(text$, i%, 1) = "|" THEN
                nl% = nl% + 1
                temp$ = MID$(text$, sp%, i% - sp%)
                IF _UPRINTWIDTH(temp$, 8) > pw% THEN pw% = _UPRINTWIDTH(temp$, 8)
                sp% = i% + 1
            END IF
        NEXT i%
        ph% = (_UFONTHEIGHT * nl%)
        '--- get object dimensions & precalc pin point ---
        x% = VAL(GetTagData$(guiObjects$(objData%, this&), "LEFT", "0"))
        y% = VAL(GetTagData$(guiObjects$(objData%, this&), "TOP", "0"))
        w% = VAL(GetTagData$(guiObjects$(objData%, this&), "WIDTH", "0"))
        h% = VAL(GetTagData$(guiObjects$(objData%, this&), "HEIGHT", "0"))
        IF guiObjects$(objType%, this&) = "RadioC" THEN
            x% = x% - INT(w% / 2): h% = w%: y% = y% - INT(h% / 2)
        END IF
        '- flip adjustments for images
        IF w% < 0 THEN w% = -w%: x% = x% - w%
        IF h% < 0 THEN h% = -h%: y% = y% - h%
        '- adjust tooltip pin position
        down% = y% - 22 - ph%: IF down% < 0 THEN down% = 0
        IF (down% + ph% + 32) > (y% + h% - 6) THEN
            y% = y% + h% - 11: down% = -1
        ELSE
            y% = y% + 10: down% = 0
        END IF
        ox% = x%: x% = x% + INT(w% * 0.33)
        '--- calculate polygon arrays for drawing ---
        REDIM cpx%(3), cpy%(3), pax%(18), pay%(18), npax%(2), npay%(2)
        $CHECKING:OFF
        cpx%(0) = x% - 16 - INT(pw% * 0.25)
        IF down% THEN cpy%(0) = y% + 24: ELSE cpy%(0) = y% - 24 - ph%
        cpx%(1) = cpx%(0) + pw%: cpy%(1) = cpy%(0)
        cpx%(2) = cpx%(1): cpy%(2) = cpy%(1) + ph%
        cpx%(3) = cpx%(0): cpy%(3) = cpy%(2)
        i% = 0
        FOR a% = 180 TO 90 STEP -30: pax%(i%) = cpx%(0) + PolToCartX%(a%, 8): pay%(i%) = cpy%(0) + PolToCartY%(a%, -8): i% = i% + 1: NEXT a%
        IF down% THEN
            pax%(4) = x% - 16: pay%(4) = pay%(3)
            pax%(5) = x%: pay%(5) = y%
            pax%(6) = x% - 6: pay%(6) = pay%(3)
            i% = 7
        END IF
        FOR a% = 90 TO 0 STEP -30: pax%(i%) = cpx%(1) + PolToCartX%(a%, 8): pay%(i%) = cpy%(1) + PolToCartY%(a%, -8): i% = i% + 1: NEXT a%
        FOR a% = 360 TO 270 STEP -30: pax%(i%) = cpx%(2) + PolToCartX%(a%, 8): pay%(i%) = cpy%(2) + PolToCartY%(a%, -8): i% = i% + 1: NEXT a%
        IF NOT down% THEN
            pax%(12) = x% - 6: pay%(12) = pay%(11)
            pax%(13) = x%: pay%(13) = y%
            pax%(14) = x% - 16: pay%(14) = pay%(11)
            i% = 15
        END IF
        FOR a% = 270 TO 180 STEP -30: pax%(i%) = cpx%(3) + PolToCartX%(a%, 8): pay%(i%) = cpy%(3) + PolToCartY%(a%, -8): i% = i% + 1: NEXT a%
        '- fit polygon to screen bounds
        IF pax%(0) < 0 THEN offx% = -pax%(0): ELSE offx% = 0
        IF pay%(3) < 0 THEN offy% = -pay%(3): ELSE offy% = 0
        IF down% THEN i% = 10: ELSE i% = 7
        IF offx% = 0 AND pax%(i%) > _WIDTH - 1 THEN offx% = _WIDTH - 1 - pax%(i%)
        FOR i% = 0 TO 18
            pax%(i%) = pax%(i%) + offx%
            pay%(i%) = pay%(i%) + offy%
        NEXT i%
        IF down% THEN i% = 8: ELSE i% = 0
        npax%(0) = pax%(12 - i%): npay%(0) = pay%(12 - i%)
        npax%(1) = pax%(13 - i%): npay%(1) = pay%(13 - i%)
        npax%(2) = pax%(14 - i%): npay%(2) = pay%(14 - i%)
        '- recalc pin position according to screen
        '- fitted polygon and the object bounds
        IF npax%(1) < ox% THEN
            move% = (ox% + 10) - npax%(1)
            IF down% AND (npax%(1) + move%) > (pax%(14) - 14) THEN
                move% = (pax%(14) - 14) - npax%(1)
            ELSEIF NOT down% AND (npax%(1) + move%) > (pax%(11) - 14) THEN
                move% = (pax%(11) - 14) - npax%(1)
            END IF
            npax%(0) = npax%(0) + move%: npax%(1) = npax%(1) + move%: npax%(2) = npax%(2) + move%
        ELSEIF npax%(1) > ox% + w% - 1 THEN
            move% = npax%(1) - (ox% + w% - 11)
            IF (npax%(1) - move%) < (pax%(15) + 28) THEN
                move% = npax%(1) - (pax%(15) + 28)
            END IF
            npax%(0) = npax%(0) - move%: npax%(1) = npax%(1) - move%: npax%(2) = npax%(2) - move%
        END IF
        pax%(12 - i%) = npax%(0): pax%(13 - i%) = npax%(1): pax%(14 - i%) = npax%(2)
        $CHECKING:ON
        '--- save data for later display restauration ---
        IF down% THEN i% = 10: ELSE i% = 7
        left% = pax%(0): topp% = pay%(3)
        widt% = pax%(i%) - pax%(0) + 1: heig% = pay%(15) - pay%(3) + 1
        IF down% THEN topp% = topp% - 16: heig% = heig% + 16
        area& = _NEWIMAGE(widt% + 15, heig% + 16, 256)
        _PUTIMAGE (0, 0), _SOURCE, area&, (left%, topp%)-(left% + widt% + 14, topp% + heig% + 15)
        l% = left%: t% = topp%: w% = widt%: h% = heig%
        guiATTProps$ = NewTag$("GUIVIEW", LTRIM$(STR$(guiAGVIndex&))) +_
                       NewTag$("OBJECT", LTRIM$(STR$(this&))) +_
                       NewTag$("LEFT", LTRIM$(STR$(left%))) +_
                       NewTag$("TOP", LTRIM$(STR$(topp%))) +_
                       NewTag$("RHANDLE", LTRIM$(STR$(area&)))
        '--- process display area (gray out, make shadow etc.) ---
        IF down% THEN topp% = topp% + 16: heig% = heig% - 16
        area& = _NEWIMAGE(widt% + 15, heig% + 15, 32)
        _PUTIMAGE (0, 0), _SOURCE, area&, (left%, topp%)-(left% + widt% + 14, topp% + heig% + 14)
        drk1& = ModifyBrightness&(area&, -0.16, 10, 10, widt% + 9, heig% + 9, -1): _FREEIMAGE area&
        drk2& = ModifyBrightness&(drk1&, -0.16, 10, 10, widt% + 7, heig% + 7, -1): _FREEIMAGE drk1&
        drk3& = ModifyBrightness&(drk2&, -0.16, 10, 10, widt% + 4, heig% + 4, -1): _FREEIMAGE drk2&
        rem1& = ModifyBrightness&(drk3&, -0.16, 0, 0, widt% - 1, 9, -1): _FREEIMAGE drk3&
        rem2& = ModifyBrightness&(rem1&, -0.16, 0, 10, 9, heig% - 1, -1): _FREEIMAGE rem1&
        rem3& = ModifyBrightness&(rem2&, -0.16, 0, 0, widt% - 1, 9, -1): _FREEIMAGE rem2&
        rem4& = ModifyBrightness&(rem3&, -0.16, 0, 10, 9, heig% - 1, -1): _FREEIMAGE rem3&
        rem5& = ModifyBrightness&(rem4&, -0.16, 0, 0, widt% - 1, 9, -1): _FREEIMAGE rem4&
        rem6& = ModifyBrightness&(rem5&, -0.16, 0, 10, 9, heig% - 1, -1): _FREEIMAGE rem5&
        grad& = ModifyContrast&(rem6&, -0.5, 0, 0, widt% - 1, heig% - 1, -1): _FREEIMAGE rem6&
        gray& = MakeGrayscale&(grad&, 0, 0, widt% - 1, heig% - 1, -1): _FREEIMAGE grad&
        filt& = ApplyFilter&(gray&, "gauss8", 0, 0, 0, 0, widt% + 10, heig% + 10, -1): _FREEIMAGE gray&
        shad& = RemapImageFS&(filt&, -1, _DEST): _FREEIMAGE filt&
        '--- do corner corrections, because I insisted on rounded corners ---
        sx% = left%: sy% = topp%: dx% = 0: dy% = 0
        _PUTIMAGE (dx%, dy%), _SOURCE, shad&, (sx%, sy%)-(sx% + 7, sy%)
        _PUTIMAGE (dx%, dy%), _SOURCE, shad&, (sx%, sy%)-(sx% + 3, sy% + 3)
        _PUTIMAGE (dx%, dy%), _SOURCE, shad&, (sx%, sy%)-(sx%, sy% + 7)
        sx% = left%: sy% = topp% + heig% - 1: dx% = 0: dy% = heig% - 1
        _PUTIMAGE (dx%, dy%), _SOURCE, shad&, (sx%, sy%)-(sx% + 7, sy% + 1)
        _PUTIMAGE (dx%, dy% - 3), _SOURCE, shad&, (sx%, sy% - 3)-(sx% + 3, sy%)
        _PUTIMAGE (dx%, dy% - 7), _SOURCE, shad&, (sx%, sy% - 7)-(sx%, sy%)
        sx% = sx% + 9: sy% = sy% + 10: dx% = dx% + 9: dy% = dy% + 10
        _PUTIMAGE (dx%, dy%), _SOURCE, shad&, (sx%, sy%)-(sx% + 7, sy%)
        _PUTIMAGE (dx%, dy% - 3), _SOURCE, shad&, (sx%, sy% - 3)-(sx% + 3, sy%)
        _PUTIMAGE (dx%, dy% - 7), _SOURCE, shad&, (sx%, sy% - 7)-(sx%, sy%)
        sx% = left% + widt% - 1: sy% = topp%: dx% = widt% - 1: dy% = 0
        _PUTIMAGE (dx% - 7, dy%), _SOURCE, shad&, (sx% - 7, sy%)-(sx%, sy%)
        _PUTIMAGE (dx% - 3, dy%), _SOURCE, shad&, (sx% - 3, sy%)-(sx%, sy% + 3)
        _PUTIMAGE (dx%, dy%), _SOURCE, shad&, (sx%, sy%)-(sx% + 1, sy% + 7)
        sx% = sx% + 11: sy% = sy% + 9: dx% = dx% + 11: dy% = dy% + 9
        _PUTIMAGE (dx% - 7, dy%), _SOURCE, shad&, (sx% - 7, sy%)-(sx%, sy%)
        _PUTIMAGE (dx% - 3, dy%), _SOURCE, shad&, (sx% - 3, sy%)-(sx%, sy% + 3)
        _PUTIMAGE (dx%, dy%), _SOURCE, shad&, (sx%, sy%)-(sx%, sy% + 7)
        sx% = left% + widt% + 9: sy% = topp% + heig% + 9: dx% = widt% + 9: dy% = heig% + 9
        _PUTIMAGE (dx% - 7, dy%), _SOURCE, shad&, (sx% - 7, sy%)-(sx%, sy%)
        _PUTIMAGE (dx% - 3, dy% - 3), _SOURCE, shad&, (sx% - 3, sy% - 3)-(sx%, sy%)
        _PUTIMAGE (dx%, dy% - 7), _SOURCE, shad&, (sx%, sy% - 7)-(sx%, sy%)
        '--- draw tooltip (comic like speaking bubble) ---
        _PUTIMAGE (left%, topp%), shad&, _DEST: _FREEIMAGE shad&
        FillPolygon npax%(), npay%(), POINT(npax%(0) - 5, npay%(0)), POINT(npax%(0) - 5, npay%(0))
        FillPolygon pax%(), pay%(), -1, guiHighPen%
        REDIM opax%(0), opay%(0)
        IF OffsetPolygon%(pax%(), pay%(), opax%(), opay%(), -0.66) THEN
            FillPolygon opax%(), opay%(), -1, guiHighPen%
        END IF
        ERASE opax%, opay%
        '--- print the text into the bubble ---
        sp% = 1: nl% = 0
        FOR i% = 1 TO LEN(text$)
            IF MID$(text$, i%, 1) = "|" THEN
                temp$ = MID$(text$, sp%, i% - sp%)
                prim% = _PRINTMODE
                SetPrintMode pmKEEP%
                COLOR guiShadowPen%
                _UPRINTSTRING (pax%(3) + 2 + INT((pw% - _UPRINTWIDTH(temp$, 8)) / 2), pay%(0) + 2 + (nl% * _UFONTHEIGHT)), temp$, , 8
                COLOR guiShinePen%
                _UPRINTSTRING (pax%(3) + 1 + INT((pw% - _UPRINTWIDTH(temp$, 8)) / 2), pay%(0) + 1 + (nl% * _UFONTHEIGHT)), temp$, , 8
                SetPrintMode prim%
                nl% = nl% + 1
                sp% = i% + 1
            END IF
        NEXT i%
        '--- snapshot bubble, for redraw on StringC cursor blink ---
        area& = _NEWIMAGE(w% + 15, h% + 16, 256)
        _PUTIMAGE (0, 0), _SOURCE, area&, (l%, t%)-(l% + w% + 14, t% + h% + 15)
        SetTag guiATTProps$, "IHANDLE", LTRIM$(STR$(area&))
        '--- cleanup arrays ---
        ERASE cpx%, cpy%, pax%, pay%, npax%, npay%
    END IF
END IF
END SUB


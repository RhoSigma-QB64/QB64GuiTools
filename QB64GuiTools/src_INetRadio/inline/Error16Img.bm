'============================================================
'=== This file was created with MakeDATA.bas by RhoSigma, ===
'=== you must $INCLUDE this at the end of your program.   ===
'============================================================

'---------------------------
'--- ReadError16ImgData$ ---
'---------------------------
' This function will read the DATAs you've created with MakeDATA.bas
' into a string, no data will be written to disk. If you rather wanna
' rebuild the original file on disk, then use the write function below.
'
' You may directly pass the returned string to _SNDOPEN, _LOADIMAGE or
' _LOADFONT when using the memory load capabilities of these commands.
'----------
' SYNTAX:
'   dataStr$ = ReadError16ImgData$
'----------
' RESULT:
'   --- dataStr$ ---
'    The data of the embedded file. This is in fact the same as if you
'    had opend the file and read its entire content into a single string.
'---------------------------------------------------------------------
FUNCTION ReadError16ImgData$
'--- option _explicit requirements ---
DIM numL&, numB&, rawdata$, stroffs&, i&, dat&
'--- read DATAs ---
RESTORE Error16Img
READ numL&, numB&
rawdata$ = SPACE$((numL& * 4) + numB&)
stroffs& = 1
FOR i& = 1 TO numL&
    READ dat&
    MID$(rawdata$, stroffs&, 4) = MKL$(dat&)
    stroffs& = stroffs& + 4
NEXT i&
IF numB& > 0 THEN
    FOR i& = 1 TO numB&
        READ dat&
        MID$(rawdata$, stroffs&, 1) = CHR$(dat&)
        stroffs& = stroffs& + 1
    NEXT i&
END IF
'--- set result ---
ReadError16ImgData$ = rawdata$
END FUNCTION

'----------------------------
'--- WriteError16ImgData$ ---
'----------------------------
' This function will write the DATAs you've created with MakeDATA.bas
' back to disk and so it rebuilds the original file.
'
' After the writeback call, only use the returned realFile$ to access the
' written file. It's your given path, but with an maybe altered filename
' (number added) in order to avoid the overwriting of an already existing
' file with the same name in the given location.
'----------
' SYNTAX:
'   realFile$ = WriteError16ImgData$ (wantFile$)
'----------
' INPUTS:
'   --- wantFile$ ---
'    The filename you would like to write the DATAs to, can contain
'    a full or relative path.
'----------
' RESULT:
'   --- realFile$ ---
'    - On success this is the path and filename finally used after all
'      applied checks, use only this returned filename to access the
'      written file.
'    - On failure this function will panic with the appropriate runtime
'      error code which you may trap and handle as needed with your own
'      ON ERROR GOTO... handler.
'---------------------------------------------------------------------
FUNCTION WriteError16ImgData$ (file$)
'--- option _explicit requirements ---
DIM po%, body$, ext$, num%, numL&, numB&, rawdata$, stroffs&, i&, dat&, ff%
'--- separate filename body & extension ---
FOR po% = LEN(file$) TO 1 STEP -1
    IF MID$(file$, po%, 1) = "." THEN
        body$ = LEFT$(file$, po% - 1)
        ext$ = MID$(file$, po%)
        EXIT FOR
    ELSEIF MID$(file$, po%, 1) = "\" OR MID$(file$, po%, 1) = "/" OR po% = 1 THEN
        body$ = file$
        ext$ = ""
        EXIT FOR
    END IF
NEXT po%
'--- avoid overwriting of existing files ---
num% = 1
WHILE _FILEEXISTS(file$)
    file$ = body$ + "(" + LTRIM$(STR$(num%)) + ")" + ext$
    num% = num% + 1
WEND
'--- write DATAs ---
RESTORE Error16Img
READ numL&, numB&
rawdata$ = SPACE$((numL& * 4) + numB&)
stroffs& = 1
FOR i& = 1 TO numL&
    READ dat&
    MID$(rawdata$, stroffs&, 4) = MKL$(dat&)
    stroffs& = stroffs& + 4
NEXT i&
IF numB& > 0 THEN
    FOR i& = 1 TO numB&
        READ dat&
        MID$(rawdata$, stroffs&, 1) = CHR$(dat&)
        stroffs& = stroffs& + 1
    NEXT i&
END IF
ff% = FREEFILE
OPEN file$ FOR OUTPUT AS ff%
PRINT #ff%, rawdata$;
CLOSE ff%
'--- set result ---
WriteError16ImgData$ = file$
EXIT FUNCTION

'--- DATAs representing the contents of file Error16px.png
'---------------------------------------------------------------------
Error16Img:
DATA 160,23
DATA &H474E5089,&H0A1A0A0D,&H0D000000,&H52444849,&H10000000,&H10000000,&H00000608,&HFFF31F00
DATA &H00000061,&H59487009,&H0B000073,&H0B000013,&H9A000113,&H0000189C,&H44494902,&HCB385441
DATA &H4C3F5395,&H7D1C6113,&H8E577DDF,&H95682502,&HFC7721C2,&H8445142B,&H89A8B550,&H8C683109
DATA &H8C63040E,&H6E312183,&H20980E0E,&H460C8383,&HAAC80343,&HCA83898B,&H9C1C60E6,&HC545801C
DATA &H2C4F684A,&HA5284B44,&H2D2857A5,&H73F5DEBD,&HA1A9A268,&H4BF2DF45,&HE5E5EFDE,&H2807F7E5
DATA &H61224480,&HA5E3C78E,&H5F343485,&HFC627263,&HA9594558,&HDFF25FE2,&HDBFAE8CB,&HD59E2FB9
DATA &H5E5C74DD,&HCC9E4267,&HC8111C3D,&HADB477FB,&HBFF279A5,&H8C4E4C12,&HF30B09F5,&H5DBB9783
DATA &HB810559C,&H31A8DD1D,&HE6F95555,&HF7E75F3C,&HD528D04C,&H189DB650,&HA00B32ED,&HEE28238E
DATA &H3576A274,&HA7475700,&HC43E49BB,&H383069EF,&H5CA77C34,&HED97A859,&HADB8AE76,&H6DC3A61D
DATA &HAE56AD10,&H2F161A39,&H5434BC5C,&HECE7A0D0,&H50997D99,&H5B49FEE8,&HA1D69025,&H55342AA9
DATA &H8874D305,&HC97441EB,&H13A9F0F2,&H835E5B4E,&H8FAED7AB,&H65BD1758,&H6122D595,&H2D6C0A5A
DATA &HC10E1208,&H82A06E88,&HB021A4F2,&HB7AE745C,&H43AED1F7,&HE83BBA1C,&HA7D1A8B0,&H94AD073D
DATA &HE4916D6E,&HC37434EC,&HA1531700,&H6D0E78BE,&H68E60979,&H471DA484,&HECA599DB,&H04A7D78D
DATA &H75C81273,&H95E58F75,&H0A2A941F,&H44BD4D89,&H1D21F14A,&HC58F410A,&HC0C602B2,&HF4883647
DATA &H5DA71A71,&HC52CB1AE,&H71800508,&HA70F68F7,&HAF741F78,&HFE6D532C,&H3A58A6CF,&H0C244C8D
DATA &H9BF82D63,&H441324B3,&H22DAE497,&HF5F4F249,&H0072F15F,&H77193340,&HE303D7AB,&HC2673FBB
DATA &HBE02DEC4,&H638739A9,&H33886DF1,&H4771C81F,&HAA51BBAB,&HEBD4E8E1,&HECC60357,&H808EADCC
DATA &H2A64B29F,&H32482C47,&H53429E78,&H697C397C,&H6AF4452A,&H7AD37CB1,&H3977C620,&H6DBFE79D
DATA &H5CFC08AA,&H5FCC8C34,&H53F9F987,&HCFEC56B6,&H8662564D,&H9881BEA9,&HE4FD6236,&HDE8DC0E6
DATA &H33D55B4A,&H212A64C1,&HC05FE084,&H247AC318,&H1AB6B3BC,&H40004DBC,&H42966D16,&H3A07999F
DATA &H80,&HED,&H5F,&HFA,&HE1,&HE1,&HAA,&H0F,&H21,&HB1,&HF0,&H00,&H00,&H00,&H00,&H49
DATA &H45,&H4E,&H44,&HAE,&H42,&H60,&H82
END FUNCTION

